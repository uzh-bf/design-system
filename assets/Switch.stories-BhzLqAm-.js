import{r as i,j as e,u as h}from"./index-dj-XLryl.js";import"./dialog-Plx3bNvU.js";import{S as n}from"./Switch-BM4AXV_a.js";import"./index-Dx3L3kPF.js";import"./index.es-DfCH8m0D.js";import"./index-CNXhm44v.js";import"./index-DW48STyt.js";import"./index-BZPBm7hA.js";import"./index-BiZ0HvOU.js";import"./index-eUvximyX.js";import"./index-D-E1vtMZ.js";import"./index-BIMH0WG9.js";import"./index-BYdVE-1h.js";import"./index-CRwA_tZO.js";import"./bundle-mjs-yGZq-iow.js";import"./FormLabel-Bzh_qK7I.js";import"./Label-Bixhyfv3.js";import"./index-KY_7V5C3.js";import"./Tooltip-DQ7pm0MC.js";import"./tooltip-DSjYszNQ.js";import"./index-BpQXsMTw.js";import"./index-lrkCId4v.js";import"./index-Cc164bUF.js";import"./index-DNJixy74.js";import"./index-UteDyhCW.js";import"./index-BZD4gnwI.js";import"./index-CHvWqUYX.js";import"./utils-BOrC3--L.js";const _=()=>{const[a,s]=i.useState(!1);return e.jsx(n,{checked:a,label:a?"Checked":"Unchecked",onCheckedChange:t=>s(t)})},P=()=>{const[a,s]=i.useState(!1);return e.jsx(n,{required:!0,checked:a,label:a?"Checked":"Unchecked",onCheckedChange:t=>s(t)})},G=()=>{const[a,s]=i.useState(!1);return e.jsxs(e.Fragment,{children:[e.jsx(n,{required:!0,checked:a,label:a?"Checked":"Unchecked",tooltip:"This is a tooltip",onCheckedChange:t=>s(t)}),e.jsx(n,{required:!0,checked:a,label:a?"Checked":"Unchecked",tooltip:"This is a tooltip",error:"Error message",onCheckedChange:t=>s(t)})]})},H=()=>{const[a,s]=i.useState(!1);return e.jsx(n,{required:!0,error:a?void 0:"This field is required",checked:a,label:a?"Checked":"Unchecked",onCheckedChange:t=>s(t)})},J=()=>{const[a,s]=i.useState(void 0);return e.jsx(n,{checked:a,label:typeof a>"u"?"Undefined":a?"Checked":"Unchecked",onCheckedChange:t=>s(t)})},K=()=>{const[a,s]=i.useState(!1);return e.jsx(n,{disabled:!0,checked:a,label:a?"Checked":"Unchecked",onCheckedChange:t=>s(t)})},O=()=>{const[a,s]=i.useState(!0);return e.jsx(n,{disabled:!0,checked:a,label:a?"Checked":"Unchecked",onCheckedChange:t=>s(t)})},Q=()=>{const[a,s]=i.useState(!1),[t,d]=i.useState(!1),[r,c]=i.useState(!1);return e.jsxs(e.Fragment,{children:[e.jsx("div",{className:"mb-3",children:e.jsx(n,{checked:a,label:"Standard switch",onCheckedChange:l=>s(l)})}),e.jsx("div",{className:"mb-3",children:e.jsx(n,{checked:t,size:"lg",label:"Large switch",onCheckedChange:l=>d(l)})}),e.jsx("div",{className:"mb-3",children:e.jsx(n,{checked:r,size:"sm",label:"Small switch",onCheckedChange:l=>c(l)})}),e.jsx("div",{className:"mb-3",children:e.jsx(n,{disabled:!0,checked:a,label:"Standard switch",onCheckedChange:l=>s(l)})}),e.jsx("div",{className:"mb-3",children:e.jsx(n,{disabled:!0,checked:t,size:"lg",label:"Large switch",onCheckedChange:l=>d(l)})}),e.jsx("div",{children:e.jsx(n,{disabled:!0,checked:r,size:"sm",label:"Small switch",onCheckedChange:l=>c(l)})})]})};function o(a){const s={code:"code",li:"li",p:"p",ul:"ul",...h(),...a.components};return e.jsxs(e.Fragment,{children:[`
`,e.jsxs("div",{className:"prose prose-sm max-w-none",children:[e.jsxs(s.p,{className:"ladle-markdown",children:["The ",e.jsx(s.code,{className:"ladle-markdown",children:"Switch"})," component provides an enhanced toggle control for binary state management with support for labels, tooltips, error handling, and multiple sizes. It offers flexible positioning, validation integration, and accessibility features for comprehensive form and settings interfaces."]}),e.jsx(s.p,{className:"ladle-markdown",children:"Use this component when you need to:"}),e.jsxs(s.ul,{className:"ladle-markdown",children:[`
`,e.jsx(s.li,{className:"ladle-markdown",children:"Create toggle controls for settings and preferences with clear visual feedback"}),`
`,e.jsx(s.li,{className:"ladle-markdown",children:"Implement form switches with validation, error messages, and required field indicators"}),`
`,e.jsx(s.li,{className:"ladle-markdown",children:"Build accessible binary input controls with proper labeling and keyboard navigation"}),`
`,e.jsx(s.li,{className:"ladle-markdown",children:"Provide size variants for different UI contexts and density requirements"}),`
`,e.jsx(s.li,{className:"ladle-markdown",children:"Design toggle interfaces with tooltips and contextual help information"}),`
`]}),e.jsx(s.p,{className:"ladle-markdown",children:"The component supports controlled state management, multiple size variants (small, medium, large), flexible label positioning (left/right), validation with error messages, tooltip integration, disabled states, and comprehensive testing attribute support for all toggle elements."}),e.jsx(s.p,{className:"ladle-markdown",children:"The Switch component accepts the following props:"}),e.jsxs(s.ul,{className:"ladle-markdown",children:[`
`,e.jsx(s.li,{className:"ladle-markdown",children:"@param id - The id of the switch."}),`
`,e.jsx(s.li,{className:"ladle-markdown",children:"@param data - The object of data attributes that can be used for testing (e.g. data-test or data-cy)"}),`
`,e.jsx(s.li,{className:"ladle-markdown",children:"@param label - The label that is displayed next to the switch."}),`
`,e.jsx(s.li,{className:"ladle-markdown",children:"@param tooltip - The tooltip that is displayed when hovering over the label."}),`
`,e.jsx(s.li,{className:"ladle-markdown",children:"@param checked - Indicator whether the switch is checked or not (or indefinite if undefined value). State is managed by the parent component."}),`
`,e.jsx(s.li,{className:"ladle-markdown",children:"@param onCheckedChange - The function that is called when the switch is checked or unchecked. The new value is passed as a parameter."}),`
`,e.jsx(s.li,{className:"ladle-markdown",children:"@param onBlur - The function that is called when the switch loses focus."}),`
`,e.jsx(s.li,{className:"ladle-markdown",children:"@param disabled - Indicator whether the switch is disabled or not."}),`
`,e.jsx(s.li,{className:"ladle-markdown",children:"@param fluid - Indicator whether the switch should be fluid or not."}),`
`,e.jsx(s.li,{className:"ladle-markdown",children:"@param error - The error message that is shown next the switch."}),`
`,e.jsx(s.li,{className:"ladle-markdown",children:"@param hideError - Indicator whether the error message should be hidden or not."}),`
`,e.jsx(s.li,{className:"ladle-markdown",children:"@param required - Indicator whether the switch is required or not."}),`
`,e.jsx(s.li,{className:"ladle-markdown",children:"@param labelLeft - Indicator whether the label should be displayed on the left or right side of the switch."}),`
`,e.jsx(s.li,{className:"ladle-markdown",children:"@param size - The size of the switch. The size can be small, medium or large."}),`
`,e.jsx(s.li,{className:"ladle-markdown",children:"@param className - The optional className object allows you to override the default styling."}),`
`]})]}),`
`,`
`]})}function m(a={}){const{wrapper:s}={...h(),...a.components};return s?e.jsx(s,{...a,children:e.jsx(o,{...a})}):o(a)}m.storyName="Readme";typeof window<"u"&&window.document&&window.document.createElement&&document.documentElement.setAttribute("data-storyloaded","");export{_ as Default,K as Disabled,O as DisabledActive,H as Error,m as MDXContent,P as Required,Q as Sizes,G as Tooltip,J as Undefined};
