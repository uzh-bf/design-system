import{j as e,u as g}from"./index-DNKnBQbc.js";import"./dialog-C2yM523i.js";import{u as F,F as l,a as t,c as V,b as L}from"./index.esm-LVtGoUjj.js";import{B as n}from"./Button-CTGZ-ABb.js";import{T as w}from"./TextareaField-mTtaks5x.js";import"./index.es-y5XtGzyL.js";import"./index-BHjxhZVt.js";import"./bundle-mjs-yGZq-iow.js";import"./button-CkWEPR_t.js";import"./index-BZobgM4b.js";import"./index-Dy_2iZN6.js";import"./utils-BDfbtdGL.js";import"./index-B8qhK8lp.js";import"./FormLabel-B8QxvMZz.js";import"./Label-Bk_lY5xy.js";import"./index-CjC71xm0.js";import"./index-CE6VUXtI.js";import"./Tooltip-H4KNxOE3.js";import"./tooltip-BX9AHBpx.js";import"./index-DW48STyt.js";import"./index-CONO9bIb.js";import"./index-kBwOAQqN.js";import"./index-CNiC6hyB.js";import"./index-DwrQch3M.js";import"./index-Aoh75WxM.js";import"./index-BNZzbdP1.js";import"./index-BQAknlUA.js";import"./index-BkJ8RkI-.js";import"./index-DBpKN-9r.js";import"./index-BobOIPHd.js";import"./index-mkQ3Ir16.js";function s({id:i,data:a,name:r,value:T,onChange:k,error:y,label:d,labelType:m="small",icon:h,placeholder:c,tooltip:u,required:p=!1,hideError:x=!1,disabled:j=!1,className:b,...f}){const[N,o]=F(r||"");return r?e.jsx(w,{id:i,data:a,label:d,name:r,field:N,labelType:m,placeholder:c,tooltip:u,required:p,error:o.error&&o.touched?o.error:void 0,isTouched:o.touched,hideError:x,disabled:j,className:b,icon:h,...f}):e.jsx(w,{id:i,data:a,value:T,onChange:k,label:d,labelType:m,placeholder:c,tooltip:u,required:p,error:y,hideError:x,disabled:j,className:b,icon:h,...f})}const re=()=>e.jsxs("div",{children:[e.jsx("div",{children:'The default Formik field works with a "name" input'}),e.jsx(l,{initialValues:{name:""},isInitialValid:!1,onSubmit:async(i,{resetForm:a})=>{alert(`Form submitted with value: ${i.name}`),a()},children:({values:i})=>e.jsxs("div",{children:[e.jsxs(t,{children:[e.jsx(s,{name:"name",label:"Label",tooltip:"Tooltip for this input",className:{root:"mb-1 w-96"},placeholder:"Placeholder"}),e.jsx(n,{type:"submit",children:"Submit"})]}),e.jsxs("div",{children:["Value: ",i.name]})]})})]}),oe=()=>e.jsxs("div",{children:[e.jsx("div",{children:'The Formik field works with a "name" input and maximum length (including label)'}),e.jsx(l,{initialValues:{name:""},isInitialValid:!1,onSubmit:async(i,{resetForm:a})=>{alert(`Form submitted with value: ${i.name}`),a()},children:({values:i})=>e.jsxs("div",{children:[e.jsxs(t,{children:[e.jsx(s,{name:"name",label:"Label",tooltip:"Tooltip for this input",className:{root:"mb-1"},placeholder:"Placeholder",maxLength:20,maxLengthUnit:"characters"}),e.jsx(n,{type:"submit",children:"Submit"})]}),e.jsxs("div",{children:["Value: ",i.name]})]})})]}),de=()=>e.jsxs("div",{children:[e.jsx("div",{children:'The default Formik field works with a "name" input'}),e.jsx(l,{initialValues:{name:""},isInitialValid:!1,onSubmit:async(i,{resetForm:a})=>{alert(`Form submitted with value: ${i.name}`),a()},children:({values:i})=>e.jsxs("div",{children:[e.jsxs(t,{children:[e.jsx(s,{disabled:!0,name:"name",label:"Label",tooltip:"Tooltip for a disabled text field",className:{root:"mb-1"},placeholder:"Placeholder (disabled field)"}),e.jsx(n,{type:"submit",children:"Submit"})]}),e.jsxs("div",{children:["Value: ",i.name]})]})})]}),me=()=>e.jsxs("div",{children:[e.jsx("div",{children:"By adding a required attribute, the label of the field changes it appearance"}),e.jsx(l,{initialValues:{name:""},isInitialValid:!1,onSubmit:async(i,{resetForm:a})=>{alert(`Form submitted with value: ${i.name}`),a()},children:({values:i})=>e.jsxs("div",{children:[e.jsxs(t,{children:[e.jsx(s,{required:!0,name:"name",label:"Label",tooltip:"Tooltip for this input",className:{root:"mb-1"},placeholder:"Placeholder"}),e.jsx(n,{type:"submit",children:"Submit"})]}),e.jsxs("div",{children:["Value: ",i.name]})]})})]}),he=()=>e.jsxs("div",{children:[e.jsx("div",{children:'An alternative version of the text field input allows to work with a "value" and "onChange" attribute instead of the "name" attribute. This field is modified in a way that whitespaces are removed from the input on change.'}),e.jsx(l,{initialValues:{name:""},isInitialValid:!1,onSubmit:async(i,{resetForm:a})=>{alert(`Form submitted with value: ${i.name}`),a()},children:({values:i,setFieldValue:a})=>e.jsxs("div",{children:[e.jsxs(t,{children:[e.jsx(s,{value:i.name,onChange:r=>{a("name",r.replace(/\s/g,""))},label:"Label",tooltip:"Tooltip for this input",className:{root:"mb-1"},placeholder:"Placeholder"}),e.jsx(n,{type:"submit",children:"Submit"})]}),e.jsxs("div",{children:["Value: ",i.name]})]})})]}),ce=()=>e.jsx("div",{children:e.jsx(l,{initialValues:{name:""},isInitialValid:!1,onSubmit:async(i,{resetForm:a})=>{alert(`Form submitted with value: ${i.name}`),a()},children:({values:i,setFieldValue:a})=>e.jsxs("div",{children:[e.jsxs(t,{children:[e.jsx(s,{isTouched:!0,error:"Error message",value:i.name,onChange:r=>{a("name",r)},label:"Label",tooltip:"Tooltip for this input",className:{root:"mb-1"},placeholder:"Placeholder"}),e.jsx(n,{type:"submit",children:"Submit"})]}),e.jsxs("div",{children:["Value: ",i.name]})]})})}),ue=()=>e.jsxs("div",{children:[e.jsx("div",{children:'The default Formik field works with a "name" input'}),e.jsx(l,{initialValues:{name:""},isInitialValid:!1,onSubmit:async(i,{resetForm:a})=>{alert(`Form submitted with value: ${i.name}`),a()},children:({values:i})=>e.jsxs("div",{children:[e.jsxs(t,{children:[e.jsx(s,{name:"name",label:"Label",tooltip:"Tooltip for this input",className:{root:"mb-1 w-1/2",label:"text-red-500",input:"bg-uzh-blue-20",error:"text-red-700"},placeholder:"Placeholder"}),e.jsx(n,{type:"submit",children:"Submit"})]}),e.jsxs("div",{children:["Value: ",i.name]})]})})]}),pe=()=>e.jsxs("div",{children:[e.jsx("div",{children:"This text field should have a maximum length of 10 characters or will display an error otherwise."}),e.jsx(l,{initialValues:{name:""},isInitialValid:!1,onSubmit:async(i,{resetForm:a})=>{alert(`Form submitted with value: ${i.name}`),a()},validationSchema:V().shape({name:L().required("This field is required").max(10,"Max 10 characters")}),children:({values:i})=>e.jsxs("div",{children:[e.jsxs(t,{children:[e.jsx(s,{name:"name",label:"Label",tooltip:"Tooltip for this input",className:{root:"mb-1"},placeholder:"Placeholder"}),e.jsx(n,{type:"submit",children:"Submit"})]}),e.jsxs("div",{children:["Value: ",i.name]})]})})]}),xe=()=>e.jsxs("div",{children:[e.jsx("div",{children:"Formik text area component with a large label"}),e.jsx(l,{initialValues:{name:""},isInitialValid:!1,onSubmit:async(i,{resetForm:a})=>{alert(`Form submitted with value: ${i.name}`),a()},children:({values:i})=>e.jsxs("div",{children:[e.jsxs(t,{children:[e.jsx(s,{required:!0,name:"name",label:"Label",labelType:"large",tooltip:"Tooltip for this input",className:{root:"mb-1"},placeholder:"Placeholder"}),e.jsx(n,{type:"submit",children:"Submit"})]}),e.jsxs("div",{children:["Value: ",i.name]})]})})]});function v(i){const a={code:"code",li:"li",p:"p",ul:"ul",...g(),...i.components};return e.jsxs(e.Fragment,{children:[`
`,e.jsxs("div",{className:"prose prose-sm max-w-none",children:[e.jsxs(a.p,{className:"ladle-markdown",children:["The ",e.jsx(a.code,{className:"ladle-markdown",children:"FormikTextareaField"})," component is a Formik wrapper around the ",e.jsx(a.code,{className:"ladle-markdown",children:"TextareaField"})," component. In addition to labels, tooltips, etc. it also offers direct interfaces for form validation, error messages, and form submission handling."]}),e.jsx(a.p,{className:"ladle-markdown",children:"The FormikTextareaField accepts the following props:"}),e.jsxs(a.ul,{className:"ladle-markdown",children:[`
`,e.jsx(a.li,{className:"ladle-markdown",children:"@param id - The id of the field."}),`
`,e.jsx(a.li,{className:"ladle-markdown",children:"@param data - The object of data attributes that can be used for testing (e.g. data-test or data-cy)"}),`
`,e.jsx(a.li,{className:"ladle-markdown",children:"@param name - The name of the field as used to keep track of the state in Formik. If no value and onChange function are provided, this field is required."}),`
`,e.jsx(a.li,{className:"ladle-markdown",children:"@param value - The value of the field. This is used to manage the state internally. If no name is provided, this field is required."}),`
`,e.jsx(a.li,{className:"ladle-markdown",children:"@param onChange - The onChange function is called when the value of the field changes. This is used to manage the state internally. If no name is provided, this field is required."}),`
`,e.jsx(a.li,{className:"ladle-markdown",children:"@param error - The error message that is shown below the field. If a name is provided, this prop will not be used."}),`
`,e.jsx(a.li,{className:"ladle-markdown",children:"@param label - The optional label is shown next to the field in the form."}),`
`,e.jsx(a.li,{className:"ladle-markdown",children:"@param labelType - The optional labelType can be used to change the size and position of the label according to pre-defined standards."}),`
`,e.jsx(a.li,{className:"ladle-markdown",children:"@param placeholder - The optional placeholder is shown when the field is empty."}),`
`,e.jsx(a.li,{className:"ladle-markdown",children:"@param tooltip - The optional tooltip is shown on hover next to the label."}),`
`,e.jsx(a.li,{className:"ladle-markdown",children:"@param maxLength - The optional maxLength is shown below the field to indicate the maximum number of characters allowed."}),`
`,e.jsx(a.li,{className:"ladle-markdown",children:"@param maxLengthUnit - The optional maxLengthUnit is shown next to the maxLength to indicate the unit of the maximum number of characters allowed."}),`
`,e.jsx(a.li,{className:"ladle-markdown",children:"@param hideMaxLength - Indicate whether the maxLength should be hidden or not."}),`
`,e.jsx(a.li,{className:"ladle-markdown",children:"@param required - Indicate whether the field is required or not."}),`
`,e.jsx(a.li,{className:"ladle-markdown",children:"@param hideError - Hide the error message below this component as is might be more appropriate to show it somewhere else."}),`
`,e.jsx(a.li,{className:"ladle-markdown",children:"@param disabled - Disable the field."}),`
`,e.jsx(a.li,{className:"ladle-markdown",children:"@param className - The optional className object allows you to override the default styling."}),`
`]})]}),`
`,`
`]})}function S(i={}){const{wrapper:a}={...g(),...i.components};return a?e.jsx(a,{...i,children:e.jsx(v,{...i})}):v(i)}S.storyName="Readme";typeof window<"u"&&window.document&&window.document.createElement&&document.documentElement.setAttribute("data-storyloaded","");export{re as Default,de as Disabled,xe as LargeLabel,S as MDXContent,oe as MaxLength,ce as OnChangeError,he as OnChangeFunction,me as Required,ue as Styled,pe as Validation};
