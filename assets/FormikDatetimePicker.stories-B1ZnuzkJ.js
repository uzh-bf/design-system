import{j as e,u as m}from"./index-Dsqlv4xT.js";import"./dialog-CpkHy-uZ.js";import{u as F,F as i,a as r,c as V,d as I}from"./index.esm-C61EbFET.js";import{B as s}from"./Button-2WMGxljf.js";import{D as M}from"./DatetimePicker-C9obMO3o.js";import"./index.es-Ca7Q5MQ4.js";import"./index-0mppRRyN.js";import"./bundle-mjs-yGZq-iow.js";import"./button-DtqbDflj.js";import"./index-LhZVK77S.js";import"./index-POM7Cf5D.js";import"./utils-C-qQmYoL.js";import"./index-D9GdmwpL.js";import"./index-B8qhK8lp.js";import"./dayjs.min-DgW3so_5.js";import"./FormLabel-C6FiULgO.js";import"./Label-Ucjg-J_F.js";import"./index-C_FgmjxC.js";import"./index-Cggp0mZS.js";import"./Tooltip-DYK9AxHx.js";import"./tooltip-ByrS96KN.js";import"./index-DW48STyt.js";import"./index-D8HSqGtz.js";import"./index-DAf9zm9r.js";import"./index-BV4TQOyz.js";import"./index-DaKE7nS7.js";import"./index-KHu7JP1T.js";import"./index-DctRK0TL.js";import"./index-BK2a66gN.js";import"./index-wOa_S5ED.js";import"./index-Cmor4_lx.js";import"./index-DGtFL8p7.js";import"./index-Jv8rFrrY.js";import"./calendar-SkM_UEf_.js";import"./chevron-left-Xyjxp7rO.js";import"./createLucideIcon-aIqLPYp3.js";import"./chevron-right-BzrOQG-f.js";import"./chevron-down-C4I2EQQ0.js";import"./input-CqIIR99R.js";import"./popover-DIV5f_v3.js";import"./index-zC5WjiOe.js";import"./select-DAggvr_2.js";import"./index-BdQq_4o_.js";import"./index-Bo970NOP.js";import"./index-BIsKQ-9N.js";import"./index-CC7QUsgJ.js";import"./check-CXCx0Tpf.js";function n({name:a,label:t="",labelType:c="small",placeholder:h,tooltip:p,required:u=!1,disabled:b=!1,hideError:j=!1,className:x,dataTrigger:w,dataCalendar:f,dataHours:g,dataMinutes:k,dataSeconds:N,dataPreviousMonth:v,dataNextMonth:y,...T}){const[S,l,o]=F(a);return e.jsx(M,{value:S.value,onChange:async D=>{await o.setValue(D),await o.setTouched(!0)},label:t,labelType:c,placeholder:h,tooltip:p,required:u,disabled:b,error:l.error,hideError:j,isTouched:l.touched,className:x,dataTrigger:w,dataCalendar:f,dataHours:g,dataMinutes:k,dataSeconds:N,dataPreviousMonth:v,dataNextMonth:y,...T})}const Se=()=>e.jsx("div",{children:e.jsx(i,{initialValues:{date:new Date("2025-01-01")},onSubmit:async(a,{resetForm:t})=>{alert(`Form submitted with date: ${a.date}`),t()},children:({values:a})=>e.jsxs("div",{children:[e.jsxs(r,{children:[e.jsx(n,{name:"date",className:{trigger:"mb-2"}}),e.jsx(s,{type:"submit",children:"Submit"})]}),e.jsxs("div",{children:["Value: ",a.date.toISOString()]})]})})}),De=()=>e.jsx("div",{children:e.jsx(i,{initialValues:{date:new Date("2025-01-01")},onSubmit:async(a,{resetForm:t})=>{alert(`Form submitted with date: ${a.date}`),t()},children:({values:a})=>e.jsxs("div",{children:[e.jsxs(r,{children:[e.jsx(n,{name:"date",className:{trigger:"mb-2"},disabled:!0}),e.jsx(s,{type:"submit",children:"Submit"})]}),e.jsxs("div",{children:["Value: ",a.date.toISOString()]})]})})}),Fe=()=>e.jsx("div",{children:e.jsx(i,{initialValues:{date:new Date("2025-01-01")},onSubmit:async(a,{resetForm:t})=>{alert(`Form submitted with date: ${a.date}`),t()},children:({values:a})=>e.jsxs("div",{children:[e.jsxs(r,{children:[e.jsx(n,{name:"date",className:{trigger:"mb-2"},label:"Label"}),e.jsx(s,{type:"submit",children:"Submit"})]}),e.jsxs("div",{children:["Value: ",a.date.toISOString()]})]})})}),Ve=()=>e.jsx("div",{children:e.jsx(i,{initialValues:{date:new Date("2025-01-01")},onSubmit:async(a,{resetForm:t})=>{alert(`Form submitted with date: ${a.date}`),t()},children:({values:a})=>e.jsxs("div",{children:[e.jsxs(r,{children:[e.jsx(n,{name:"date",className:{trigger:"mb-2"},label:"Testlabel",required:!0,tooltip:"Test Tooltip"}),e.jsx(s,{type:"submit",children:"Submit"})]}),e.jsxs("div",{children:["Value: ",a.date.toISOString()]})]})})}),Ie=()=>e.jsxs("div",{children:[e.jsx("div",{children:"The date has to be chosen to be after 2020 - otherwise the component displays an error."}),e.jsx(i,{initialValues:{date:new Date("2020-01-01")},onSubmit:async(a,{resetForm:t})=>{alert(`Form submitted with date: ${a.date}`),t()},validationSchema:V().shape({date:I().min("2020-01-01","Date has to be after 2020")}),children:({values:a,isValid:t})=>e.jsxs("div",{children:[e.jsxs(r,{children:[String(t),e.jsx(n,{required:!0,name:"date",className:{trigger:"mb-2"},label:"Testlabel",tooltip:"Test Tooltip"}),e.jsx(s,{type:"submit",disabled:!t,children:"Submit"})]}),e.jsxs("div",{children:["Value: ",a.date.toISOString()]})]})})]});function d(a){const t={code:"code",li:"li",p:"p",ul:"ul",...m(),...a.components};return e.jsxs(e.Fragment,{children:[`
`,e.jsxs("div",{className:"prose prose-sm max-w-none",children:[e.jsxs(t.p,{className:"ladle-markdown",children:["The ",e.jsx(t.code,{className:"ladle-markdown",children:"FormikDatetimePicker"})," component is a Formik wrapper around the ",e.jsx(t.code,{className:"ladle-markdown",children:"DatetimePicker"})," component that combines calendar date selection with time input for complete datetime management. It integrates seamlessly with Formik forms and provides comprehensive validation, error handling, and form submission capabilities."]}),e.jsx(t.p,{className:"ladle-markdown",children:"Use this component when you need:"}),e.jsxs(t.ul,{className:"ladle-markdown",children:[`
`,e.jsx(t.li,{className:"ladle-markdown",children:"Event scheduling with specific times"}),`
`,e.jsx(t.li,{className:"ladle-markdown",children:"Appointment booking systems"}),`
`,e.jsx(t.li,{className:"ladle-markdown",children:"Task deadline management with precise timing"}),`
`,e.jsx(t.li,{className:"ladle-markdown",children:"Form fields requiring both date and time selection"}),`
`,e.jsx(t.li,{className:"ladle-markdown",children:"Datetime input with validation and error handling"}),`
`]}),e.jsx(t.p,{className:"ladle-markdown",children:"The component provides a popover-based interface with calendar navigation and separate time input controls for hours, minutes, and seconds. It includes extensive testing support with granular data attributes for each interactive element."}),e.jsx(t.p,{className:"ladle-markdown",children:"The FormikDatetimePicker accepts the following props:"}),e.jsxs(t.ul,{className:"ladle-markdown",children:[`
`,e.jsx(t.li,{className:"ladle-markdown",children:"@param name - The name of the field as used to keep track of the state in Formik."}),`
`,e.jsx(t.li,{className:"ladle-markdown",children:"@param label - The label of the datetime picker."}),`
`,e.jsx(t.li,{className:"ladle-markdown",children:"@param labelType - The type of the label (small or large)."}),`
`,e.jsx(t.li,{className:"ladle-markdown",children:"@param placeholder - The placeholder of the datetime picker (is only shown if no date is selected)."}),`
`,e.jsx(t.li,{className:"ladle-markdown",children:"@param tooltip - The tooltip of the datetime picker (is only shown if a label is given)."}),`
`,e.jsx(t.li,{className:"ladle-markdown",children:"@param required - Whether the datetime label should contain a required symbol."}),`
`,e.jsx(t.li,{className:"ladle-markdown",children:"@param disabled - Whether the datetime picker is disabled or not."}),`
`,e.jsx(t.li,{className:"ladle-markdown",children:"@param hideError - Whether the error message should be hidden."}),`
`,e.jsx(t.li,{className:"ladle-markdown",children:"@param className - The optional className object allows you to override the default styling."}),`
`,e.jsx(t.li,{className:"ladle-markdown",children:"@param dataTrigger - The object of data attributes that can be used for testing (e.g. data-test or data-cy) for the popover trigger."}),`
`,e.jsx(t.li,{className:"ladle-markdown",children:"@param dataCalendar - The object of data attributes that can be used for testing (e.g. data-test or data-cy) for the calendar icon."}),`
`,e.jsx(t.li,{className:"ladle-markdown",children:"@param dataHours - The object of data attributes that can be used for testing (e.g. data-test or data-cy) for the hours input."}),`
`,e.jsx(t.li,{className:"ladle-markdown",children:"@param dataMinutes - The object of data attributes that can be used for testing (e.g. data-test or data-cy) for the minutes input."}),`
`,e.jsx(t.li,{className:"ladle-markdown",children:"@param dataSeconds - The object of data attributes that can be used for testing (e.g. data-test or data-cy) for the seconds input."}),`
`,e.jsx(t.li,{className:"ladle-markdown",children:"@param dataPreviousMonth - The object of data attributes that can be used for testing (e.g. data-test or data-cy) for the previous month button."}),`
`,e.jsx(t.li,{className:"ladle-markdown",children:"@param dataNextMonth - The object of data attributes that can be used for testing (e.g. data-test or data-cy) for the next month button."}),`
`]})]}),`
`,`
`]})}function $(a={}){const{wrapper:t}={...m(),...a.components};return t?e.jsx(t,{...a,children:e.jsx(d,{...a})}):d(a)}$.storyName="Readme";typeof window<"u"&&window.document&&window.document.createElement&&document.documentElement.setAttribute("data-storyloaded","");export{Se as Default,De as Disabled,Fe as Labelled,$ as MDXContent,Ve as Tooltip,Ie as Validation};
