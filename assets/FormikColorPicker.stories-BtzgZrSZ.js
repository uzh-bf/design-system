import{r as S,j as e,u as h}from"./index-CVqru2be.js";import"./dialog-C-71x_tT.js";import{u as V,F as i,a,c as L,b as P}from"./index.esm-DuN5mjul.js";import{B as t}from"./Button-D69mCAFX.js";import{C as $}from"./ColorPicker-CGKdvW_4.js";import"./index.es-r8SpnGQq.js";import"./index-Bf71MGUz.js";import"./bundle-mjs-yGZq-iow.js";import"./button-CfRsFPkW.js";import"./index-b6IP3858.js";import"./index--tXxNNaN.js";import"./utils-CsPM183f.js";import"./index-B8qhK8lp.js";import"./FormLabel-3wU2HsfZ.js";import"./Label-BDpkrmIq.js";import"./index-Bs3UcjNi.js";import"./index-Bsaof1VL.js";import"./Tooltip-GxaUh4t_.js";import"./tooltip-DlPCAQk5.js";import"./index-DW48STyt.js";import"./index-BqYQhx-7.js";import"./index-DwL8hC5E.js";import"./index-DyQ19Ywc.js";import"./index-D9pGdYfW.js";import"./index-CgUDnRm9.js";import"./index-BVA4MbeI.js";import"./index-B5tq6NWd.js";import"./index-IrVXhrCN.js";import"./index-Gu6FmL9O.js";import"./index-BOu551n7.js";import"./index-DL96U-9T.js";function l({name:r,label:o,labelType:p="small",validateForm:s,tooltip:u,required:x=!1,disabled:b,triggerIcon:j,presetColors:f,position:w,submitText:k,colorLabel:F,colorTooltip:T,dataTrigger:N,dataHexInput:v,dataSubmit:y,className:g}){const[n,c,m]=V(r);return S.useEffect(()=>{s==null||s()},[n.value]),e.jsx($,{color:n.value,label:o,labelType:p,required:x,onSubmit:async C=>{await m.setValue(C),await m.setTouched(!0)},disabled:b,triggerIcon:j,presetColors:f,position:w,submitText:k,colorLabel:F,tooltip:u,colorTooltip:T,error:c.error,isTouched:c.touched,dataTrigger:N,dataHexInput:v,dataSubmit:y,className:g})}const de=()=>e.jsx("div",{children:e.jsx(i,{initialValues:{color:"#FF0000"},onSubmit:async(r,{resetForm:o})=>{alert(`Form submitted with color: ${r.color}. The form will be reset.`),o()},children:({values:r})=>e.jsxs("div",{children:[e.jsxs(a,{children:[e.jsx(l,{name:"color",submitText:"Save",colorLabel:"Color",className:{root:"mb-4"}}),e.jsx(t,{type:"submit",children:"Submit"})]}),e.jsxs("div",{children:["Value: ",r.color]})]})})}),he=()=>e.jsx("div",{children:e.jsx(i,{initialValues:{color:"#FF0000"},onSubmit:async(r,{resetForm:o})=>{alert(`Form submitted with color: ${r.color}. The form will be reset.`),o()},children:({values:r})=>e.jsxs("div",{children:[e.jsxs(a,{children:[e.jsx(l,{required:!0,submitText:"Save",colorLabel:"Color",label:"Picker",tooltip:"This is a tooltip",name:"color",className:{root:"mb-4"}}),e.jsx(l,{required:!0,submitText:"Save",colorLabel:"Color",label:"Picker",labelType:"large",tooltip:"This is a tooltip",name:"color",className:{root:"mb-4"}}),e.jsx(t,{type:"submit",children:"Submit"})]}),e.jsxs("div",{children:["Value: ",r.color]})]})})}),pe=()=>e.jsx("div",{children:e.jsx(i,{initialValues:{color:"#FF0000"},onSubmit:async(r,{resetForm:o})=>{alert(`Form submitted with color: ${r.color}. The form will be reset.`),o()},children:({values:r})=>e.jsxs("div",{children:[e.jsxs(a,{children:[e.jsx(l,{disabled:!0,name:"color",className:{root:"mb-4"},submitText:"Save",colorLabel:"Color"}),e.jsx(t,{type:"submit",children:"Submit"})]}),e.jsxs("div",{children:["Value: ",r.color]})]})})}),ue=()=>e.jsx("div",{children:e.jsx(i,{initialValues:{color:"#FF0000"},onSubmit:async(r,{resetForm:o})=>{alert(`Form submitted with color: ${r.color}. The form will be reset.`),o()},children:({values:r})=>e.jsxs("div",{children:[e.jsxs(a,{children:[e.jsx(l,{name:"color",className:{root:"mb-4"},presetColors:["#FF0000","#00FF00","#0000FF"],submitText:"Save",colorLabel:"Color"}),e.jsx(t,{type:"submit",children:"Submit"})]}),e.jsxs("div",{children:["Value: ",r.color]})]})})}),xe=()=>e.jsxs("div",{children:[e.jsx("div",{children:"The selected color has to be red (#FF0000), otherwise an error will be displayed"}),e.jsx(i,{initialValues:{color:"#FF0000"},onSubmit:async(r,{resetForm:o})=>{alert(`Form submitted with color: ${r.color}. The form will be reset.`),o()},validationSchema:L().shape({color:P().required().matches(/^#(?:[fF]{2}[0]{4})$/,"The color has to be red")}),children:({values:r,validateForm:o})=>e.jsxs("div",{children:[e.jsxs(a,{children:[e.jsx(l,{name:"color",submitText:"Save",colorLabel:"Color",validateForm:o,className:{root:"mb-4"}}),e.jsx(t,{type:"submit",children:"Submit"})]}),e.jsxs("div",{children:["Value: ",r.color]})]})})]});function d(r){const o={code:"code",li:"li",p:"p",ul:"ul",...h(),...r.components};return e.jsxs(e.Fragment,{children:[`
`,e.jsxs("div",{className:"prose prose-sm max-w-none",children:[e.jsxs(o.p,{className:"ladle-markdown",children:["The ",e.jsx(o.code,{className:"ladle-markdown",children:"FormikColorPicker"})," component is a Formik wrapper around the ",e.jsx(o.code,{className:"ladle-markdown",children:"ColorPicker"})," component. In addition to labels, tooltips, etc. it also offers direct interfaces for form validation, error messages, and form submission handling."]}),e.jsx(o.p,{className:"ladle-markdown",children:"The FormikColorPicker accepts the following props:"}),e.jsxs(o.ul,{className:"ladle-markdown",children:[`
`,e.jsx(o.li,{className:"ladle-markdown",children:"@param name - The name of the field (used for Formik)."}),`
`,e.jsx(o.li,{className:"ladle-markdown",children:"@param label - The label for the color picker."}),`
`,e.jsx(o.li,{className:"ladle-markdown",children:"@param labelType - The type of label, can be 'small' or 'large'."}),`
`,e.jsx(o.li,{className:"ladle-markdown",children:"@param validateForm - A function to validate the form when the color is changed."}),`
`,e.jsx(o.li,{className:"ladle-markdown",children:"@param tooltip - Optional tooltip text or component to display additional information."}),`
`,e.jsx(o.li,{className:"ladle-markdown",children:"@param required - Indicates whether the field is required."}),`
`,e.jsx(o.li,{className:"ladle-markdown",children:"@param disabled - Indicates whether the color picker is disabled."}),`
`,e.jsx(o.li,{className:"ladle-markdown",children:"@param triggerIcon - An optional icon to display as a trigger for the color picker."}),`
`,e.jsx(o.li,{className:"ladle-markdown",children:"@param presetColors - An array of preset colors to display in the color picker."}),`
`,e.jsx(o.li,{className:"ladle-markdown",children:"@param position - The position of the color picker relative to the trigger icon."}),`
`,e.jsx(o.li,{className:"ladle-markdown",children:"@param submitText - The text to display on the submit button of the color picker."}),`
`,e.jsx(o.li,{className:"ladle-markdown",children:"@param colorLabel - The label for the color input field."}),`
`,e.jsx(o.li,{className:"ladle-markdown",children:"@param colorTooltip - Optional tooltip for the color input field."}),`
`,e.jsx(o.li,{className:"ladle-markdown",children:"@param dataTrigger - Optional data attributes for the trigger icon (for testing purposes)."}),`
`,e.jsx(o.li,{className:"ladle-markdown",children:"@param dataHexInput - Optional data attributes for the hex input field (for testing purposes)."}),`
`]})]}),`
`,`
`]})}function q(r={}){const{wrapper:o}={...h(),...r.components};return o?e.jsx(o,{...r,children:e.jsx(d,{...r})}):d(r)}q.storyName="Readme";typeof window<"u"&&window.document&&window.document.createElement&&document.documentElement.setAttribute("data-storyloaded","");export{ue as CustomPresets,de as Default,pe as Disabled,he as Label,q as MDXContent,xe as Validation};
