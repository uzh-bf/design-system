import{j as e,r as $,u as S}from"./index-Dsqlv4xT.js";import"./dialog-CpkHy-uZ.js";import{D as q,E as D,F as E}from"./index-B8qhK8lp.js";import{u as A,F as t,a as n,c as M,b as z}from"./index.esm-C61EbFET.js";import{B as s}from"./Button-2WMGxljf.js";import{t as F}from"./bundle-mjs-yGZq-iow.js";import{T as N}from"./TextField-VcHputri.js";import"./index.es-Ca7Q5MQ4.js";import"./index-0mppRRyN.js";import"./button-DtqbDflj.js";import"./index-LhZVK77S.js";import"./index-POM7Cf5D.js";import"./utils-C-qQmYoL.js";import"./FormLabel-C6FiULgO.js";import"./Label-Ucjg-J_F.js";import"./index-C_FgmjxC.js";import"./index-Cggp0mZS.js";import"./Tooltip-DYK9AxHx.js";import"./tooltip-ByrS96KN.js";import"./index-DW48STyt.js";import"./index-D8HSqGtz.js";import"./index-DAf9zm9r.js";import"./index-BV4TQOyz.js";import"./index-DaKE7nS7.js";import"./index-KHu7JP1T.js";import"./index-DctRK0TL.js";import"./index-BK2a66gN.js";import"./index-wOa_S5ED.js";import"./index-Cmor4_lx.js";import"./index-DGtFL8p7.js";import"./index-Jv8rFrrY.js";import"./input-CqIIR99R.js";function r({id:a,data:i,name:l,value:m,onChange:I,onEnter:h,onReset:c,error:C,label:u,labelType:p="small",icon:x,iconPosition:j="left",onIconClick:f,placeholder:w,tooltip:b,required:v=!1,hideError:k=!1,isTouched:L=!1,disabled:g=!1,onPaste:y,className:o,...T}){const[P,d]=A(l||"");return l?e.jsx("div",{className:F("w-full",o==null?void 0:o.root),children:e.jsx(N,{id:a,data:i,label:u,name:l,field:P,labelType:p,placeholder:w,tooltip:b,required:v,error:d.error&&d.touched?d.error:void 0,isTouched:d.touched,hideError:k,disabled:g,onPaste:y,className:o,icon:x,iconPosition:j,onIconClick:f,onEnter:h,onReset:c,...T})}):e.jsx("div",{className:F("w-full",o==null?void 0:o.root),children:e.jsx(N,{id:a,data:i,value:m,onChange:I,label:u,labelType:p,placeholder:w,tooltip:b,required:v,error:C,isTouched:L,hideError:k,disabled:g,onPaste:y,className:o,icon:x,iconPosition:j,onIconClick:f,onEnter:h,onReset:c,...T})})}const be=()=>e.jsxs("div",{children:[e.jsx("div",{children:'The default Formik field works with a "name" input'}),e.jsx(t,{initialValues:{name:""},isInitialValid:!1,onSubmit:async(a,{resetForm:i})=>{alert(`Form submitted with value: ${a.name}`),i()},children:({values:a})=>e.jsxs("div",{children:[e.jsxs(n,{children:[e.jsx(r,{name:"name",label:"Label",tooltip:"Tooltip for this input",className:{root:"mb-1 w-80"},placeholder:"Placeholder"}),e.jsx(s,{type:"submit",children:"Submit"})]}),e.jsxs("div",{children:["Value: ",a.name]})]})})]}),ve=()=>e.jsx("div",{children:e.jsx(t,{initialValues:{name:""},isInitialValid:!1,onSubmit:async(a,{resetForm:i})=>{alert(`Form submitted with value: ${a.name}`),i()},children:({values:a})=>e.jsxs("div",{children:[e.jsxs(n,{children:[e.jsx(r,{name:"name",label:"Label",tooltip:"Tooltip for this input",className:{root:"mb-1 w-80"},placeholder:"Placeholder",icon:q,onIconClick:()=>alert("Icon clicked")}),e.jsx(s,{type:"submit",children:"Submit"})]}),e.jsxs("div",{children:["Value: ",a.name]})]})})}),ke=()=>{const[a,i]=$.useState(!0);return e.jsxs("div",{children:[e.jsx("div",{children:"The icon prop allows to pass a fontawesom icon to the component, which will then be displayed on the right side of the input field"}),e.jsx(t,{initialValues:{name:""},isInitialValid:!1,onSubmit:async(l,{resetForm:m})=>{alert(`Form submitted with value: ${l.name}`),m()},children:({values:l})=>e.jsxs("div",{children:[e.jsxs(n,{children:[e.jsx(r,{name:"name",label:"Label",tooltip:"Tooltip for this input",className:{root:"mb-1"},placeholder:"Placeholder",icon:a?D:E,iconPosition:"right",onIconClick:()=>i(!a),type:a?"password":"text"}),e.jsx(s,{type:"submit",children:"Submit"})]}),e.jsxs("div",{children:["Value: ",l.name]})]})})]})},ge=()=>e.jsxs("div",{children:[e.jsx("div",{children:'The default Formik field works with a "name" input'}),e.jsx(t,{initialValues:{name:""},isInitialValid:!1,onSubmit:async(a,{resetForm:i})=>{alert(`Form submitted with value: ${a.name}`),i()},children:({values:a})=>e.jsxs("div",{children:[e.jsxs(n,{children:[e.jsx(r,{disabled:!0,name:"name",label:"Label",tooltip:"Tooltip for a disabled text field",className:{root:"mb-1"},placeholder:"Placeholder (disabled field)"}),e.jsx(s,{type:"submit",children:"Submit"})]}),e.jsxs("div",{children:["Value: ",a.name]})]})})]}),ye=()=>e.jsxs("div",{children:[e.jsx("div",{children:"By adding a required attribute, the label of the field changes it appearance"}),e.jsx(t,{initialValues:{name:""},isInitialValid:!1,onSubmit:async(a,{resetForm:i})=>{alert(`Form submitted with value: ${a.name}`),i()},children:({values:a})=>e.jsxs("div",{children:[e.jsxs(n,{children:[e.jsx(r,{required:!0,name:"name",label:"Label",tooltip:"Tooltip for this input",className:{root:"mb-1"},placeholder:"Placeholder"}),e.jsx(s,{type:"submit",children:"Submit"})]}),e.jsxs("div",{children:["Value: ",a.name]})]})})]}),Te=()=>e.jsxs("div",{children:[e.jsx("div",{children:'An alternative version of the text field input allows to work with a "value" and "onChange" attribute instead of the "name" attribute. This field is modified in a way that whitespaces are removed from the input on change.'}),e.jsx(t,{initialValues:{name:""},isInitialValid:!1,onSubmit:async(a,{resetForm:i})=>{alert(`Form submitted with value: ${a.name}`),i()},children:({values:a,setFieldValue:i})=>e.jsxs("div",{children:[e.jsxs(n,{children:[e.jsx(r,{value:a.name,onChange:l=>{i("name",l.replace(/\s/g,""))},label:"Label",tooltip:"Tooltip for this input",className:{root:"mb-1"},placeholder:"Placeholder"}),e.jsx(s,{type:"submit",children:"Submit"})]}),e.jsxs("div",{children:["Value: ",a.name]})]})})]}),Fe=()=>e.jsx("div",{children:e.jsx(t,{initialValues:{name:""},isInitialValid:!1,onSubmit:async(a,{resetForm:i})=>{alert(`Form submitted with value: ${a.name}`),i()},children:({values:a,setFieldValue:i})=>e.jsxs("div",{children:[e.jsxs(n,{children:[e.jsx(r,{isTouched:!0,error:"Error message",value:a.name,onChange:l=>{i("name",l)},label:"Label",tooltip:"Tooltip for this input",className:{root:"mb-1"},placeholder:"Placeholder"}),e.jsx(s,{type:"submit",children:"Submit"})]}),e.jsxs("div",{children:["Value: ",a.name]})]})})}),Ne=()=>e.jsxs("div",{children:[e.jsx("div",{children:'The default Formik field works with a "name" input'}),e.jsx(t,{initialValues:{name:""},isInitialValid:!1,onSubmit:async(a,{resetForm:i})=>{alert(`Form submitted with value: ${a.name}`),i()},children:({values:a})=>e.jsxs("div",{children:[e.jsxs(n,{children:[e.jsx(r,{name:"name",label:"Label",tooltip:"Tooltip for this input",className:{root:"mb-1 w-1/2",label:"text-red-500",input:"bg-uzh-blue-20",error:"text-red-700"},placeholder:"Placeholder"}),e.jsx(s,{type:"submit",children:"Submit"})]}),e.jsxs("div",{children:["Value: ",a.name]})]})})]}),Ve=()=>e.jsxs("div",{children:[e.jsx("div",{children:"This text field should have a maximum length of 10 characters or will display an error otherwise."}),e.jsx(t,{initialValues:{name:""},isInitialValid:!1,onSubmit:async(a,{resetForm:i})=>{alert(`Form submitted with value: ${a.name}`),i()},validationSchema:M().shape({name:z().required("This field is required").max(10,"Max 10 characters")}),children:({values:a})=>e.jsxs("div",{children:[e.jsxs(n,{children:[e.jsx(r,{name:"name",label:"Label",tooltip:"Tooltip for this input",className:{root:"mb-1"},placeholder:"Placeholder"}),e.jsx(s,{type:"submit",children:"Submit"})]}),e.jsxs("div",{children:["Value: ",a.name]})]})})]}),Se=()=>e.jsxs("div",{children:[e.jsx("div",{children:"Formik text area component with a large label"}),e.jsx(t,{initialValues:{name:""},isInitialValid:!1,onSubmit:async(a,{resetForm:i})=>{alert(`Form submitted with value: ${a.name}`),i()},children:({values:a})=>e.jsxs("div",{children:[e.jsxs(n,{children:[e.jsx(r,{required:!0,name:"name",label:"Label",labelType:"large",tooltip:"Tooltip for this input",className:{root:"mb-1"},placeholder:"Placeholder"}),e.jsx(s,{type:"submit",children:"Submit"})]}),e.jsxs("div",{children:["Value: ",a.name]})]})})]});function V(a){const i={code:"code",li:"li",p:"p",ul:"ul",...S(),...a.components};return e.jsxs(e.Fragment,{children:[`
`,e.jsxs("div",{className:"prose prose-sm max-w-none",children:[e.jsxs(i.p,{className:"ladle-markdown",children:["The ",e.jsx(i.code,{className:"ladle-markdown",children:"FormikTextField"})," component seamlessly integrates text input fields with Formik form management, providing automatic validation, error handling, and state synchronization. It extends the standalone TextField with Formik-specific features while maintaining all base functionality."]}),e.jsx(i.p,{className:"ladle-markdown",children:"Use this component when you need:"}),e.jsxs(i.ul,{className:"ladle-markdown",children:[`
`,e.jsx(i.li,{className:"ladle-markdown",children:"Text inputs within Formik-managed forms"}),`
`,e.jsx(i.li,{className:"ladle-markdown",children:"Automatic validation with error display"}),`
`,e.jsx(i.li,{className:"ladle-markdown",children:"Form state synchronization without manual handling"}),`
`,e.jsx(i.li,{className:"ladle-markdown",children:"Password fields with show/hide toggles"}),`
`,e.jsx(i.li,{className:"ladle-markdown",children:"Search inputs with icons"}),`
`,e.jsx(i.li,{className:"ladle-markdown",children:"Fields that respond to paste events"}),`
`]}),e.jsx(i.p,{className:"ladle-markdown",children:"The component supports two usage patterns: controlled (with name prop for Formik integration) or uncontrolled (with value/onChange for custom state management). It includes built-in error display, required field indicators, and comprehensive accessibility features."}),e.jsx(i.p,{className:"ladle-markdown",children:"The FormikTextField accepts the following props:"}),e.jsxs(i.ul,{className:"ladle-markdown",children:[`
`,e.jsx(i.li,{className:"ladle-markdown",children:"@param id - The id of the field."}),`
`,e.jsx(i.li,{className:"ladle-markdown",children:"@param data - The object of data attributes that can be used for testing (e.g. data-test or data-cy)"}),`
`,e.jsx(i.li,{className:"ladle-markdown",children:"@param name - The name of the field as used to keep track of the state in Formik. If no value and onChange function are provided, this field is required."}),`
`,e.jsx(i.li,{className:"ladle-markdown",children:"@param value - The value of the field. This is used to manage the state internally. If no name is provided, this field is required."}),`
`,e.jsx(i.li,{className:"ladle-markdown",children:"@param onChange - The onChange function is called when the value of the field changes. This is used to manage the state internally. If no name is provided, this field is required."}),`
`,e.jsx(i.li,{className:"ladle-markdown",children:"@param error - The error message that is shown below the field. If a name is provided, this prop will not be used."}),`
`,e.jsx(i.li,{className:"ladle-markdown",children:"@param label - The optional label is shown next to the field in the form."}),`
`,e.jsx(i.li,{className:"ladle-markdown",children:"@param labelType - The optional labelType can be used to change the size and position of the label according to pre-defined standards."}),`
`,e.jsx(i.li,{className:"ladle-markdown",children:"@param icon - An optional icon (FontAwesomeIcon IconDefinition) that is shown on the right side of the text input component"}),`
`,e.jsx(i.li,{className:"ladle-markdown",children:"@param iconPosition - The optional iconPosition can be used to change the position of the icon according to pre-defined standards."}),`
`,e.jsx(i.li,{className:"ladle-markdown",children:"@param onIconClick - An optional function that is called when the icon (previous prop) is clicked"}),`
`,e.jsx(i.li,{className:"ladle-markdown",children:"@param placeholder - The optional placeholder is shown when the field is empty."}),`
`,e.jsx(i.li,{className:"ladle-markdown",children:"@param tooltip - The optional tooltip is shown on hover next to the label."}),`
`,e.jsx(i.li,{className:"ladle-markdown",children:"@param required - Indicate whether the field is required or not."}),`
`,e.jsx(i.li,{className:"ladle-markdown",children:"@param hideError - Hide the error message below this component as is might be more appropriate to show it somewhere else."}),`
`,e.jsx(i.li,{className:"ladle-markdown",children:"@param disabled - Disable the field."}),`
`,e.jsx(i.li,{className:"ladle-markdown",children:"@param onPaste - An optional function that is called when the user pastes text into the field."}),`
`,e.jsx(i.li,{className:"ladle-markdown",children:"@param className - The optional className object allows you to override the default styling."}),`
`]})]}),`
`,`
`]})}function B(a={}){const{wrapper:i}={...S(),...a.components};return i?e.jsx(i,{...a,children:e.jsx(V,{...a})}):V(a)}B.storyName="Readme";typeof window<"u"&&window.document&&window.document.createElement&&document.documentElement.setAttribute("data-storyloaded","");export{be as Default,ge as Disabled,ve as Icon,ke as IconRight,Se as LargeLabel,B as MDXContent,Fe as OnChangeError,Te as OnChangeFunction,ye as Required,Ne as Styled,Ve as Validation};
