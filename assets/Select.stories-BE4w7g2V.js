import{j as e,r as d,u as m}from"./index-5zfbyF-G.js";import"./dialog-CIk5f8ug.js";import{i}from"./index-B8qhK8lp.js";import{F as r}from"./index.es-CfkgIfOr.js";import{S as t}from"./Select-ke6TwFFL.js";import{f as o,g as p}from"./values-CKgGisIZ.js";import"./index-B5tkNaVO.js";import"./bundle-mjs-yGZq-iow.js";import"./Tooltip-BOxc1EFt.js";import"./tooltip-r5AvmNgS.js";import"./index-DW48STyt.js";import"./index-DMCMOw33.js";import"./index-Bppj5AmK.js";import"./index-vGMWoFjL.js";import"./index-CFMIppGN.js";import"./index-CLJBPRDA.js";import"./index-CcBVKGj0.js";import"./index-Z9hVjeLS.js";import"./index-DDq8TFl5.js";import"./index-B6lOqFBP.js";import"./index-CWDAoxKc.js";import"./index-BZVOZmny.js";import"./index-2qOAkwFX.js";import"./index-DmZAeIjR.js";import"./utils-C1QRqxyj.js";import"./select-Dg6t5CyK.js";import"./index-BdQq_4o_.js";import"./index-D6pPnPzz.js";import"./index-B6OAnL7C.js";import"./index-C1ZfxsV2.js";import"./index-6GNRWREo.js";import"./chevron-down-Bnqi784Q.js";import"./createLucideIcon-C3KEKB4H.js";import"./check-FR_u79Mm.js";const J=()=>e.jsx(t,{placeholder:"Select an item",items:o,onChange:l=>{console.log(l)}}),K=()=>e.jsx(t,{contentPosition:"popper",placeholder:"Select an item",items:o,onChange:l=>{console.log(l)}}),Q=()=>e.jsx(t,{placeholder:"Select an item",items:o,onChange:l=>{console.log(l)},basic:!0}),Y=()=>e.jsx(t,{placeholder:"Select an item",items:o,onChange:l=>{console.log(l)},defaultValue:o[2].value}),Z=()=>{const[l,a]=d.useState();return e.jsxs("div",{children:[e.jsx("div",{children:"To use the shortLabel functionality on this example, the state needs to be kept outside of the component. If this is not done, the Select component still works without issues, but the shortLabel attribute is ignored"}),e.jsx(t,{placeholder:"Select an item",groups:[...p,{label:"Short labels",items:[{value:"apple_short",label:"Apple long label",shortLabel:"Apple"},{value:"banana_short",label:"Banana",disabled:!0,shortLabel:"Banana"},{value:"pear_short",label:"Pear long label",shortLabel:"Pear"},{value:"watermelon_short",label:"Watermelon"}]}],value:l,onChange:n=>{a(n),console.log(n)}})]})},$=()=>{const l=[{value:"apple",label:"Apple"}];return e.jsx(t,{placeholder:"Select an item",items:l,onChange:a=>{console.log(a)},disabled:!0})},ee=()=>{const l=[{value:"apple",label:"Apple"},{value:"banana",label:"Banana",disabled:!0},{value:"pear",label:"Pear"},{value:"watermelon",label:"Watermelon"},{value:"peach",label:"Peach",disabled:!0},{value:"mango",label:"Mango"}];return e.jsx(t,{placeholder:"Select an item",items:l,onChange:a=>{console.log(a)}})},ae=()=>e.jsx("div",{className:"h-12 w-full rounded-md border border-solid",children:e.jsx(t,{placeholder:"Select an item",groups:p,onChange:l=>{console.log(l)},className:{root:"h-full rounded-none border-none",content:"bg-green-200",trigger:"bg-uzh-blue-20 rounded-none border-none text-lg",item:"text-red-700",groupLabel:"text-red-700",separator:"bg-green-700"}})}),le=()=>{const l=[{value:"apple",label:"Apple long label",shortLabel:"Apple"},{value:"banana",label:"Banana long label",shortLabel:"Banana"},{value:"pear",label:"Pear long label"},{value:"watermelon",label:"Watermelon long label"},{value:"peach",label:"Peach long label"},{value:"mango",label:"Mango long label",shortLabel:"Mango"}],[a,n]=d.useState();return e.jsxs("div",{children:[e.jsx("div",{children:"Adding a shortLabel to the items of the component, the shortened version will be displayed on the trigger if the select component is collapsed. These additional attributes can be added to all items or only a selection of them. To use this shortLabel functionality, the state needs to be kept outside of the component."}),e.jsx(t,{placeholder:"Select an item",items:l,onChange:s=>{n(s),console.log(s)},value:a})]})},te=()=>{const l=[{value:"apple",label:"Apple",tooltip:"A delicious red fruit"},{value:"banana",label:"Banana",icon:e.jsx(r,{icon:i,className:"text-primary-100"}),className:{icon:"text-uzh-blue-100"},tooltip:"Rich in potassium and great for athletes"},{value:"orange",label:"Orange",icon:e.jsx(r,{icon:i}),className:{icon:"text-uzh-red-100"},tooltip:"Full of Vitamin C"}];return e.jsxs("div",{className:"flex flex-col gap-4",children:[e.jsx("div",{children:"This example shows tooltips on select items, both with and without icons. Hover over the items to see the tooltips."}),e.jsx(t,{placeholder:"Select a fruit",items:l,onChange:a=>{console.log(a)}})]})};function c(l){const a={code:"code",li:"li",p:"p",ul:"ul",...m(),...l.components};return e.jsxs(e.Fragment,{children:[`
`,e.jsxs("div",{className:"prose prose-sm max-w-none",children:[e.jsxs(a.p,{className:"ladle-markdown",children:["The ",e.jsx(a.code,{className:"ladle-markdown",children:"Select"})," component provides an enhanced dropdown selection interface with support for individual items, grouped options, custom triggers, tooltips, and advanced state management. It offers flexible positioning, styling customization, and accessibility features for comprehensive form integration."]}),e.jsx(a.p,{className:"ladle-markdown",children:"Use this component when you need to:"}),e.jsxs(a.ul,{className:"ladle-markdown",children:[`
`,e.jsx(a.li,{className:"ladle-markdown",children:"Create dropdown selection inputs with single or grouped options"}),`
`,e.jsx(a.li,{className:"ladle-markdown",children:"Implement form controls with external state management and validation integration"}),`
`,e.jsx(a.li,{className:"ladle-markdown",children:"Provide selection interfaces with tooltips, icons, and custom trigger labels"}),`
`,e.jsx(a.li,{className:"ladle-markdown",children:"Build accessible select inputs with keyboard navigation and disabled states"}),`
`,e.jsx(a.li,{className:"ladle-markdown",children:"Design custom styled select components with flexible positioning options"}),`
`]}),e.jsx(a.p,{className:"ladle-markdown",children:"The component supports individual items and grouped collections, custom trigger labels with shortLabel support, tooltip integration with optional icons, disabled states for both component and individual items, external state management, and comprehensive styling customization for all select elements."}),e.jsx(a.p,{className:"ladle-markdown",children:"The Select component accepts the following props:"}),e.jsxs(a.ul,{className:"ladle-markdown",children:[`
`,e.jsx(a.li,{className:"ladle-markdown",children:"@param id - The id of the select component."}),`
`,e.jsx(a.li,{className:"ladle-markdown",children:"@param data - The object of data attributes that can be used for testing (e.g. data-test or data-cy)"}),`
`,e.jsx(a.li,{className:"ladle-markdown",children:"@param items - The array of items that are displayed in the select component. This prop is mutually exclusive with the groups prop. If items are provided, the component does not look for groups anymore."}),`
`,e.jsx(a.li,{className:"ladle-markdown",children:"@param groups - The array of groups that are displayed in the select component. This prop is mutually exclusive with the items prop."}),`
`,e.jsx(a.li,{className:"ladle-markdown",children:"@param name - The name attribute of the select component needed for Formik integration --> see FormikSelectField"}),`
`,e.jsx(a.li,{className:"ladle-markdown",children:"@param onChange - The function that is called when the value of the select component changes (changes externally managed value)."}),`
`,e.jsx(a.li,{className:"ladle-markdown",children:"@param onBlur - The function that is called when the viewport of the select component is closed."}),`
`,e.jsx(a.li,{className:"ladle-markdown",children:"@param value - The current value of the select component (managed externally)."}),`
`,e.jsx(a.li,{className:"ladle-markdown",children:"@param defaultValue - The default value of the select component set initially."}),`
`,e.jsx(a.li,{className:"ladle-markdown",children:"@param placeholder - The placeholder text that is displayed when no value is selected."}),`
`,e.jsx(a.li,{className:"ladle-markdown",children:"@param disabled - Specifies whether the select component is disabled or not."}),`
`,e.jsx(a.li,{className:"ladle-markdown",children:"@param basic - Specifies whether the select component is basic or not. A basic select component does only have minimal styling of the trigger."}),`
`,e.jsx(a.li,{className:"ladle-markdown",children:"@param className - The optional className object allows you to override the default styling."}),`
`,e.jsx(a.li,{className:"ladle-markdown",children:"@param contentPosition - The position of the content of the select component. Currently only 'item-aligned' and 'popper' are supported."}),`
`]})]}),`
`,`
`]})}function h(l={}){const{wrapper:a}={...m(),...l.components};return a?e.jsx(a,{...l,children:e.jsx(c,{...l})}):c(l)}h.storyName="Readme";typeof window<"u"&&window.document&&window.document.createElement&&document.documentElement.setAttribute("data-storyloaded","");export{Q as Basic,le as CustomTriggerLabel,J as Default,Y as DefaultValue,$ as Disabled,ee as DisabledElements,Z as Groups,h as MDXContent,K as Popper,ae as Styled,te as WithTooltips};
