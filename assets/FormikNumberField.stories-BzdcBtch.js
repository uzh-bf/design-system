import{j as e,u as V}from"./index-CcDGD-g4.js";import"./dialog-DOGqFU5g.js";import{u as M,F as l,a as t,c as C,e as D}from"./index.esm-59ufUIBr.js";import{B as n}from"./Button-C70RK7Cs.js";import{t as F}from"./bundle-mjs-yGZq-iow.js";import{N}from"./NumberField-C1-8PODP.js";import"./index.es-B4uptDD4.js";import"./index-D6ON6ON-.js";import"./button-6EbpHnoK.js";import"./index-CDn9kirM.js";import"./index-CcgWXPIG.js";import"./utils-F6L8f0Cv.js";import"./index-B8qhK8lp.js";import"./FormLabel-Ba3HUIhg.js";import"./Label-BWf8Z5U-.js";import"./index-C_VsosSU.js";import"./index-BO8L9HOM.js";import"./Tooltip-DGLDip1T.js";import"./tooltip-CbkzcOzB.js";import"./index-DW48STyt.js";import"./index-BRayYSAr.js";import"./index-CRqjwpMj.js";import"./index-DBBPpsgf.js";import"./index-CjCNOY7Z.js";import"./index-C8DVCQNw.js";import"./index-BN5iYgvt.js";import"./index-DmKes-9c.js";import"./index-BAkwFBXs.js";import"./index-BE9Z6zS2.js";import"./index-D3qD3OMD.js";import"./index-C535Z2Km.js";import"./input-Ci9GPZbw.js";function s({id:a,name:i,value:S,onChange:I,label:m,labelType:h="small",placeholder:c,precision:u,min:p,max:x,unit:b,tooltip:j,required:f,hideError:w,error:L,isTouched:$,disabled:v,onBlur:d,data:k,className:r,...T}){const[P,y,o]=M(i||"");return i?e.jsx("div",{className:F("w-full",r==null?void 0:r.root),children:e.jsx(N,{id:a,value:P.value,onChange:async q=>await o.setValue(q),label:m,labelType:h,placeholder:c,precision:u,min:p,max:x,unit:b,tooltip:j,required:f,hideError:w,error:y.error,isTouched:y.touched,disabled:v,onBlur:()=>{o.setTouched(!0),d==null||d()},data:k,className:r,...T})}):e.jsx("div",{className:F("w-full",r==null?void 0:r.root),children:e.jsx(N,{id:a,value:S,onChange:I,label:m,labelType:h,placeholder:c,precision:u,min:p,max:x,unit:b,tooltip:j,required:f,hideError:w,error:L,isTouched:$,disabled:v,onBlur:()=>{o.setTouched(!0),d==null||d()},data:k,className:r,...T})})}const be=()=>e.jsxs("div",{children:[e.jsx("div",{children:'The default Formik field works with a "name" input'}),e.jsx(l,{initialValues:{name:""},isInitialValid:!1,onSubmit:async(a,{resetForm:i})=>{alert(`Form submitted with value: ${a.name}`),i()},children:({values:a})=>e.jsxs("div",{children:[e.jsxs(t,{children:[e.jsx(s,{name:"name",label:"Label",tooltip:"Tooltip for this input",className:{root:"mb-1 w-80"},placeholder:"Placeholder"}),e.jsx(n,{type:"submit",children:"Submit"})]}),e.jsxs("div",{children:["Value: ",a.name]})]})})]}),je=()=>e.jsxs("div",{children:[e.jsx("div",{children:"The formik number field supports the same attributes as the standard number field (including e.g. units)"}),e.jsx(l,{initialValues:{name:""},isInitialValid:!1,onSubmit:async(a,{resetForm:i})=>{alert(`Form submitted with value: ${a.name}`),i()},children:({values:a})=>e.jsxs("div",{children:[e.jsxs(t,{children:[e.jsx(s,{name:"name",label:"Label",tooltip:"Tooltip for this input",unit:"kg",className:{root:"mb-1 w-80"},placeholder:"Placeholder"}),e.jsx(n,{type:"submit",children:"Submit"})]}),e.jsxs("div",{children:["Value: ",a.name]})]})})]}),fe=()=>e.jsxs("div",{children:[e.jsx("div",{children:"Specifying minimum and maximum values will enable additional validation steps. In this case, values between 0 and 1000 will be accepted"}),e.jsx(l,{initialValues:{name:void 0},isInitialValid:!1,onSubmit:async(a,{resetForm:i})=>{alert(`Form submitted with value: ${a.name}`),i()},children:({values:a})=>e.jsxs("div",{children:[e.jsxs(t,{children:[e.jsx(s,{name:"name",label:"Label",tooltip:"Tooltip for this input",className:{root:"mb-1"},placeholder:"Placeholder",min:0,max:1e3}),e.jsx(n,{type:"submit",children:"Submit"})]}),e.jsxs("div",{children:["Value: ",a.name]})]})})]}),we=()=>e.jsxs("div",{children:[e.jsx("div",{children:"Number inputs can also be disabled with a corresponding prop, not allowing the user to make changes to the field."}),e.jsx(l,{initialValues:{name:""},isInitialValid:!1,onSubmit:async(a,{resetForm:i})=>{alert(`Form submitted with value: ${a.name}`),i()},children:({values:a})=>e.jsxs("div",{children:[e.jsxs(t,{children:[e.jsx(s,{disabled:!0,name:"name",label:"Label",tooltip:"Tooltip for disabled field",className:{root:"mb-1"},placeholder:"Placeholder (disabled field)"}),e.jsx(n,{type:"submit",children:"Submit"})]}),e.jsxs("div",{children:["Value: ",a.name]})]})})]}),ve=()=>e.jsxs("div",{children:[e.jsx("div",{children:"This formik field has validation functionalities included. The value is required and should be at least 100."}),e.jsx(l,{initialValues:{name:""},isInitialValid:!1,onSubmit:async(a,{resetForm:i})=>{alert(`Form submitted with value: ${parseFloat(a.name||"")}`),i()},validationSchema:C().shape({name:D().required("This field is required.").min(100)}),children:({values:a})=>e.jsxs("div",{children:[e.jsxs(t,{children:[e.jsx(s,{name:"name",label:"Label",tooltip:"Tooltip for this input",className:{root:"mb-1"},placeholder:"Placeholder"}),e.jsx(n,{type:"submit",children:"Submit"})]}),e.jsxs("div",{children:["Value that will be submitted with parseFloat():"," ",parseFloat(a.name||"")]})]})})]}),ke=()=>e.jsxs("div",{children:[e.jsx("div",{children:'The default Formik field works with a "name" input and allows the user to input decimal numbers as well as integers. The number of decimal places can be specified through the precision prop (set to 2 for this example).'}),e.jsx(l,{initialValues:{name:""},isInitialValid:!1,onSubmit:async(a,{resetForm:i})=>{alert(`Form submitted with value: ${parseFloat(a.name||"")}`),i()},children:({values:a})=>e.jsxs("div",{children:[e.jsxs(t,{children:[e.jsx(s,{name:"name",label:"Label",tooltip:"Tooltip for this input",className:{root:"mb-1"},placeholder:"Placeholder",precision:2}),e.jsx(n,{type:"submit",children:"Submit"})]}),e.jsxs("div",{children:["Value that will be submitted with parseFloat():"," ",parseFloat(a.name||"")]})]})})]}),Te=()=>e.jsxs("div",{children:[e.jsx("div",{children:"By fixing the precision parameter to 0, the user can only input integers."}),e.jsx(l,{initialValues:{name:""},isInitialValid:!1,onSubmit:async(a,{resetForm:i})=>{alert(`Form submitted with value: ${parseFloat(a.name||"")}`),i()},children:({values:a})=>e.jsxs("div",{children:[e.jsxs(t,{children:[e.jsx(s,{name:"name",label:"Label",tooltip:"Tooltip for this input",className:{root:"mb-1"},placeholder:"Placeholder",precision:0}),e.jsx(n,{type:"submit",children:"Submit"})]}),e.jsxs("div",{children:["Value that will be submitted with parseFloat():"," ",parseFloat(a.name||"")]})]})})]}),ye=()=>e.jsxs("div",{children:[e.jsx("div",{children:"By adding a required attribute, the label of the field changes it appearance"}),e.jsx(l,{initialValues:{name:""},isInitialValid:!1,onSubmit:async(a,{resetForm:i})=>{alert(`Form submitted with value: ${a.name}`),i()},children:({values:a})=>e.jsxs("div",{children:[e.jsxs(t,{children:[e.jsx(s,{required:!0,name:"name",label:"Label",tooltip:"Tooltip for this input",className:{root:"mb-1"},placeholder:"Placeholder"}),e.jsx(n,{type:"submit",children:"Submit"})]}),e.jsxs("div",{children:["Value: ",a.name]})]})})]}),Fe=()=>e.jsxs("div",{children:[e.jsx("div",{children:'The default Formik field works with a "name" input'}),e.jsx(l,{initialValues:{name:""},isInitialValid:!1,onSubmit:async(a,{resetForm:i})=>{alert(`Form submitted with value: ${a.name}`),i()},children:({values:a})=>e.jsxs("div",{children:[e.jsxs(t,{children:[e.jsx(s,{name:"name",label:"Label",tooltip:"Tooltip for this input",className:{root:"mb-1 w-1/2",label:"text-red-500",error:"text-red-700",input:"bg-uzh-blue-20"},placeholder:"Placeholder"}),e.jsx(n,{type:"submit",children:"Submit"})]}),e.jsxs("div",{children:["Value: ",a.name]})]})})]}),Ne=()=>e.jsxs("div",{children:[e.jsx("div",{children:"Formik text area component with a large label"}),e.jsx(l,{initialValues:{name:""},isInitialValid:!1,onSubmit:async(a,{resetForm:i})=>{alert(`Form submitted with value: ${a.name}`),i()},children:({values:a})=>e.jsxs("div",{children:[e.jsxs(t,{children:[e.jsx(s,{required:!0,name:"name",label:"Label",labelType:"large",className:{root:"mb-1"},placeholder:"Placeholder"}),e.jsx(n,{type:"submit",children:"Submit"})]}),e.jsxs("div",{children:["Value: ",a.name]})]})})]});function g(a){const i={code:"code",li:"li",p:"p",ul:"ul",...V(),...a.components};return e.jsxs(e.Fragment,{children:[`
`,e.jsxs("div",{className:"prose prose-sm max-w-none",children:[e.jsxs(i.p,{className:"ladle-markdown",children:["The ",e.jsx(i.code,{className:"ladle-markdown",children:"FormikNumberField"})," component is a Formik wrapper around the ",e.jsx(i.code,{className:"ladle-markdown",children:"NumberField"})," component. In addition to labels, tooltips, etc. it also offers direct interfaces for form validation, error messages, and form submission handling."]}),e.jsx(i.p,{className:"ladle-markdown",children:"The FormikNumberField accepts the following props:"}),e.jsxs(i.ul,{className:"ladle-markdown",children:[`
`,e.jsx(i.li,{className:"ladle-markdown",children:"@param id - The id of the input field."}),`
`,e.jsx(i.li,{className:"ladle-markdown",children:"@param value - The value of the input field (external state management)."}),`
`,e.jsx(i.li,{className:"ladle-markdown",children:"@param onChange - The onChange function of the input field (external state management)."}),`
`,e.jsx(i.li,{className:"ladle-markdown",children:"@param label - The text displayed as label."}),`
`,e.jsx(i.li,{className:"ladle-markdown",children:"@param labelType - The optional labelType can be used to change the size and position of the label according to pre-defined standards."}),`
`,e.jsx(i.li,{className:"ladle-markdown",children:"@param placeholder - The placeholder text for the input field."}),`
`,e.jsx(i.li,{className:"ladle-markdown",children:"@param precision - The optional precision defines the number of decimal places that are allowed."}),`
`,e.jsx(i.li,{className:"ladle-markdown",children:"@param min - The optional min defines the minimum value that is allowed."}),`
`,e.jsx(i.li,{className:"ladle-markdown",children:"@param max - The optional max defines the maximum value that is allowed."}),`
`,e.jsx(i.li,{className:"ladle-markdown",children:"@param unit - The optional unit is shown next to the input field."}),`
`,e.jsx(i.li,{className:"ladle-markdown",children:"@param tooltip - The optional tooltip is shown on hover over the tooltip next to the label."}),`
`,e.jsx(i.li,{className:"ladle-markdown",children:"@param required - Indicate whether the field is required or not."}),`
`,e.jsx(i.li,{className:"ladle-markdown",children:"@param hideError - Indicate whether the error message should be hidden or not."}),`
`,e.jsx(i.li,{className:"ladle-markdown",children:"@param error - The error message that is displayed below the input field."}),`
`,e.jsx(i.li,{className:"ladle-markdown",children:"@param isTouched - Indicate whether the field has been touched or not (validation is not handled by this component)."}),`
`,e.jsx(i.li,{className:"ladle-markdown",children:"@param disabled - Indicate whether the field is disabled or not."}),`
`,e.jsx(i.li,{className:"ladle-markdown",children:"@param onBlur - The onBlur function of the input field."}),`
`,e.jsx(i.li,{className:"ladle-markdown",children:"@param data - The object of data attributes that can be used for testing (e.g. data-test or data-cy)"}),`
`,e.jsx(i.li,{className:"ladle-markdown",children:"@param className - The optional className object allows you to override the default styling."}),`
`]})]}),`
`,`
`]})}function E(a={}){const{wrapper:i}={...V(),...a.components};return i?e.jsx(i,{...a,children:e.jsx(g,{...a})}):g(a)}E.storyName="Readme";typeof window<"u"&&window.document&&window.document.createElement&&document.documentElement.setAttribute("data-storyloaded","");export{ke as Decimals,be as Default,we as Disabled,Te as Integer,Ne as LargeLabel,E as MDXContent,fe as MinMax,ye as Required,Fe as Styled,je as Unit,ve as Validation};
