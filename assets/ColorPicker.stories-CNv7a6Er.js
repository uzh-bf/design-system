import{r as a,j as o,u as i}from"./index-BqTx-QX7.js";import"./dialog-zgwNaEJf.js";import{C as r}from"./ColorPicker-BI6tlq0i.js";import"./index-B8qhK8lp.js";import"./index.es-CQ9gUiBL.js";import"./index-eS_ahLXK.js";import"./bundle-mjs-yGZq-iow.js";import"./Button-BnjFx81R.js";import"./button-DK0Q7yNO.js";import"./index-G7BINlf6.js";import"./index-Co8mANBL.js";import"./utils-BwEq4KUS.js";import"./FormLabel-CItd06mF.js";import"./Label-31GFuBzx.js";import"./index-DjvPX9QL.js";import"./index-CG7PjHhg.js";import"./Tooltip-C0lal5mf.js";import"./tooltip-B5EjV4eV.js";import"./index-DW48STyt.js";import"./index-CxNXpvul.js";import"./index-UhYmvs0a.js";import"./index-C4MpRS3O.js";import"./index-y_Y8gC8d.js";import"./index-jbN9Sx1X.js";import"./index-DuitujIa.js";import"./index-Bup10qWE.js";import"./index-DsYSSo7O.js";import"./index-B5aOgEK3.js";import"./index-CpKgzUMn.js";import"./index-Dikp2s6L.js";const B=()=>{const[l,e]=a.useState("#0028A5");return o.jsx(r,{color:l,onSubmit:t=>{e(t),alert("Color set to "+t)},tooltip:"This is a tooltip",colorLabel:"Color",submitText:"Save"})},F=()=>{const[l,e]=a.useState("#0028A5");return o.jsx(r,{color:l,onSubmit:t=>{e(t),alert("Color set to "+t)},label:"Color Picker",tooltip:"This is a tooltip",colorLabel:"Color",submitText:"Save",required:!0})},R=()=>{const[l,e]=a.useState("#0028A5");return o.jsx(r,{disabled:!0,color:l,onSubmit:t=>{e(t),alert("Color set to "+t)},submitText:"Speichern",colorLabel:"Farbe"})},_=()=>{const[l,e]=a.useState("#0028A5");return o.jsxs("div",{children:[o.jsx("div",{className:"mb-60",children:"In some cases, for example when the component is close to a hard bottom limit of the page, the absolute positioning above makes more sense. The position prop allows to define different default positions. Others can be added using the className override."}),o.jsxs("div",{className:"flex flex-col gap-4",children:[o.jsx(r,{position:"top",color:l,onSubmit:t=>{e(t),alert("Color set to "+t)},submitText:"Save",colorLabel:"Color"}),o.jsx(r,{position:"top-left",color:l,onSubmit:t=>{e(t),alert("Color set to "+t)},submitText:"Save",colorLabel:"Color"}),o.jsx(r,{position:"bottom-left",color:l,onSubmit:t=>{e(t),alert("Color set to "+t)},submitText:"Save",colorLabel:"Color"})]})]})},H=()=>{const[l,e]=a.useState("#0028A5");return o.jsx(r,{position:"bottom",color:l,onSubmit:t=>{e(t),alert("Color set to "+t)},submitText:"Save",colorLabel:"Color",className:{root:"bg-gray-100",trigger:"bg-gray-200",popover:"bg-yellow-200",presetButtons:"bg-yellow-200",inputLabel:"bg-green-200",input:"bg-green-200",abort:"bg-blue-200",submit:"bg-blue-200"}})},U=()=>{const[l,e]=a.useState("#0028A5");return o.jsx(r,{position:"bottom",color:l,onSubmit:t=>{e(t),alert("Color set to "+t)},submitText:"Custom Submit",colorLabel:"Custom Color Label"})};function s(l){const e={code:"code",li:"li",p:"p",ul:"ul",...i(),...l.components};return o.jsxs(o.Fragment,{children:[`
`,o.jsxs("div",{className:"prose prose-sm max-w-none",children:[o.jsxs(e.p,{className:"ladle-markdown",children:["The ",o.jsx(e.code,{className:"ladle-markdown",children:"ColorPicker"})," component provides an intuitive color selection interface with preset colors, hex input, and customizable positioning. It offers a clean, accessible way to choose colors with validation and error handling support."]}),o.jsx(e.p,{className:"ladle-markdown",children:"Use this component when you need to:"}),o.jsxs(e.ul,{className:"ladle-markdown",children:[`
`,o.jsx(e.li,{className:"ladle-markdown",children:"Allow users to select colors for theming or customization"}),`
`,o.jsx(e.li,{className:"ladle-markdown",children:"Provide preset color palettes alongside custom color input"}),`
`,o.jsx(e.li,{className:"ladle-markdown",children:"Build forms that require color selection with validation"}),`
`,o.jsx(e.li,{className:"ladle-markdown",children:"Create design tools or configuration interfaces"}),`
`]}),o.jsx(e.p,{className:"ladle-markdown",children:"The component features preset color buttons for quick selection, hex color input with validation, flexible positioning options, and comprehensive styling customization through className overrides."}),o.jsx(e.p,{className:"ladle-markdown",children:"The props for the ColorPicker component are as follows:"}),o.jsxs(e.ul,{className:"ladle-markdown",children:[`
`,o.jsx(e.li,{className:"ladle-markdown",children:"@param color - The initial color value in hex format."}),`
`,o.jsx(e.li,{className:"ladle-markdown",children:"@param label - The label for the color picker."}),`
`,o.jsx(e.li,{className:"ladle-markdown",children:"@param labelType - The type of label, can be 'small' or 'large'."}),`
`,o.jsx(e.li,{className:"ladle-markdown",children:"@param required - Indicates whether the field is required."}),`
`,o.jsx(e.li,{className:"ladle-markdown",children:"@param onSubmit - Callback function to handle the submission of the selected color."}),`
`,o.jsx(e.li,{className:"ladle-markdown",children:"@param disabled - Indicates whether the color picker is disabled."}),`
`,o.jsx(e.li,{className:"ladle-markdown",children:"@param triggerIcon - An optional icon to display as a trigger for the color picker."}),`
`,o.jsx(e.li,{className:"ladle-markdown",children:"@param presetColors - An array of preset colors to display in the color picker."}),`
`,o.jsx(e.li,{className:"ladle-markdown",children:"@param position - The position of the color picker relative to the trigger icon."}),`
`,o.jsx(e.li,{className:"ladle-markdown",children:"@param submitText - The text to display on the submit button of the color picker."}),`
`,o.jsx(e.li,{className:"ladle-markdown",children:"@param colorLabel - The label for the color input field."}),`
`,o.jsx(e.li,{className:"ladle-markdown",children:"@param colorTooltip - Optional tooltip for the color input field."}),`
`,o.jsx(e.li,{className:"ladle-markdown",children:"@param tooltip - Optional tooltip text or component to display additional information."}),`
`,o.jsx(e.li,{className:"ladle-markdown",children:"@param error - An error message to display if the color picker has an error."}),`
`,o.jsx(e.li,{className:"ladle-markdown",children:"@param isTouched - Indicates whether the color picker has been touched (used for error display)."}),`
`,o.jsx(e.li,{className:"ladle-markdown",children:"@param dataTrigger - Optional data attributes for the trigger icon (for testing purposes)."}),`
`,o.jsx(e.li,{className:"ladle-markdown",children:"@param dataHexInput - Optional data attributes for the hex input field (for testing purposes)."}),`
`,o.jsx(e.li,{className:"ladle-markdown",children:"@param dataSubmit - Optional data attributes for the submit button (for testing purposes)."}),`
`,o.jsx(e.li,{className:"ladle-markdown",children:"@param className - Optional class names for styling the color picker and its components."}),`
`]})]}),`
`,`
`]})}function n(l={}){const{wrapper:e}={...i(),...l.components};return e?o.jsx(e,{...l,children:o.jsx(s,{...l})}):s(l)}n.storyName="Readme";typeof window<"u"&&window.document&&window.document.createElement&&document.documentElement.setAttribute("data-storyloaded","");export{U as CustomText,B as Default,R as Disabled,F as Label,n as MDXContent,_ as Position,H as Styled};
