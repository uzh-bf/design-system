import { DayPickerProps } from 'react-day-picker';
import { default as default_2 } from 'react';
import { Dispatch } from 'react';
import { FieldInputProps } from 'formik';
import { IconDefinition } from '@fortawesome/free-regular-svg-icons';
import { IconDefinition as IconDefinition_2 } from '@fortawesome/free-solid-svg-icons';
import { IconProp } from '@fortawesome/fontawesome-svg-core';
import { JSX } from 'react/jsx-runtime';
import * as React_2 from 'react';
import { SetStateAction } from 'react';

/**
 * This function returns an alphanumeric pin field component for use without Formik.
 * It mirrors the styling and behavior of the numeric FormikPinField, but allows A–Z and 0–9 input.
 *
 * @param id - The id of the input field.
 * @param value - The current value of the segmented alphanumeric input (string of length 0..length).
 * @param onChange - The change handler called with the updated value when input changes.
 * @param length - The length of the pin (number of characters).
 * @param required - Indicate whether the field is required or not.
 * @param label - The text displayed as label.
 * @param labelType - The optional labelType can be used to change the size and position of the label according to pre-defined standards.
 * @param tooltip - The optional tooltip is shown on hover over the tooltip next to the label.
 * @param hideError - Indicate whether the error message should be hidden or not.
 * @param error - The error message to display as a tooltip on the right side when the field has been touched.
 * @param isTouched - Indicate whether the field has been touched or not (validation is not handled by this component).
 * @param uppercaseOnly - If true, lowercase characters are automatically converted to uppercase.
 * @param className - The class names for the different parts of the component.
 * @param data - Optional data attributes for testing purposes.
 * @returns An alphanumeric pin field component with segmented input.
 */
export declare function AlphaNumericPinField({ id, value, onChange, length, required, label, labelType, tooltip, hideError, error, isTouched, uppercaseOnly, className, data, }: AlphaNumericPinFieldProps): JSX.Element;

export declare interface AlphaNumericPinFieldClassName {
    field?: string;
    label?: string;
    tooltip?: string;
    input?: string;
    inputItem?: string;
}

export declare interface AlphaNumericPinFieldProps {
    id?: string;
    value: string;
    onChange: (newValue: string) => Promise<void>;
    length: number;
    required?: boolean;
    label?: string;
    labelType?: 'small' | 'large';
    tooltip?: string | default_2.ReactNode;
    hideError?: boolean;
    error?: string;
    isTouched?: boolean;
    uppercaseOnly?: boolean;
    className?: AlphaNumericPinFieldClassName;
    data?: {
        cy?: string;
        test?: string;
    };
}

declare interface ColorPickerClassName {
    root?: string;
    pickerRoot?: string;
    label?: string;
    tooltip?: string;
    trigger?: string;
    popover?: string;
    presetButtons?: string;
    inputLabel?: string;
    inputTooltip?: string;
    input?: string;
    abort?: string;
    submit?: string;
}

declare interface DatePickerClassName {
    trigger?: string;
    label?: string;
    input?: string;
    tooltip?: string;
}

declare interface DatePickerProps {
    id?: string;
    date: Date | undefined;
    onDateChange: Dispatch<SetStateAction<Date | undefined>>;
    label?: string;
    labelType?: 'small' | 'large';
    align?: 'start' | 'center' | 'end';
    placeholder?: string;
    required?: boolean;
    tooltip?: string | default_2.ReactNode;
    disabled?: boolean;
    error?: string;
    hideError?: boolean;
    isTouched?: boolean;
    className?: DatePickerClassName;
    dataTrigger?: {
        cy?: string;
        test?: string;
    };
    dataCalendar?: {
        cy?: string;
        test?: string;
    };
    dataNextMonth?: {
        cy?: string;
        test?: string;
    };
    dataPreviousMonth?: {
        cy?: string;
        test?: string;
    };
}

declare type DateTimePickerProps = {
    value?: Date;
    onChange?: (date: Date | undefined) => void;
    onMonthChange?: (date: Date | undefined) => void;
    disabled?: boolean;
    /** showing `AM/PM` or not. */
    hourCycle?: 12 | 24;
    placeholder?: string;
    /**
     * The year range will be: `This year + yearRange` and `this year - yearRange`.
     * Default is 50.
     * For example:
     * This year is 2024, The year dropdown will be 1974 to 2024 which is generated by `2024 - 50 = 1974` and `2024 + 50 = 2074`.
     * */
    yearRange?: number;
    displayFormat?: string;
    /**
     * The granularity prop allows you to control the smallest unit that is displayed by DateTimePicker.
     * By default, the value is `second` which shows all time inputs.
     **/
    granularity?: Granularity;
    className?: {
        trigger?: string;
        input?: string;
        label?: string;
        tooltip?: string;
        error?: string;
    };
    /**
     * Show the default month and time when popup the calendar. Default is the current Date().
     **/
    defaultPopupValue?: Date;
    dataTrigger?: {
        cy?: string;
        test?: string;
    };
    dataCalendar?: {
        cy?: string;
        test?: string;
    };
    dataHours?: {
        cy?: string;
        test?: string;
    };
    dataMinutes?: {
        cy?: string;
        test?: string;
    };
    dataSeconds?: {
        cy?: string;
        test?: string;
    };
    dataNextMonth?: {
        cy?: string;
        test?: string;
    };
    dataPreviousMonth?: {
        cy?: string;
        test?: string;
    };
    error?: string;
    hideError?: boolean;
    isTouched?: boolean;
    label?: string;
    labelType?: 'small' | 'large';
    align?: 'start' | 'center' | 'end';
    required?: boolean;
    tooltip?: string | React_2.ReactNode;
} & Pick<DayPickerProps, 'locale' | 'weekStartsOn' | 'showWeekNumber' | 'showOutsideDays'>;

/**
 * This function returns an alphanumeric pin field that works as to be expected in a Formik environment.
 * State can be managed either through Formik or internally by passing a value and onChange function.
 *
 * @param id - The id of the field.
 * @param data - The object of data attributes that can be used for testing (e.g. data-test or data-cy)
 * @param name - The name of the field as used to keep track of the state in Formik. If no value and onChange function are provided, this field is required.
 * @param value - The value of the field. This is used to manage the state internally. If no name is provided, this field is required.
 * @param onChange - The onChange function is called when the value of the field changes. This is used to manage the state internally. If no name is provided, this field is required.
 * @param length - The length of the pin (number of characters).
 * @param error - The error message that is shown below the field. If a name is provided, this prop will not be used.
 * @param label - The optional label is shown next to the field in the form.
 * @param labelType - The optional labelType can be used to change the size and position of the label according to pre-defined standards.
 * @param tooltip - The optional tooltip is shown on hover next to the label.
 * @param required - Indicate whether the field is required or not.
 * @param hideError - Hide the error message below this component as is might be more appropriate to show it somewhere else.
 * @param isTouched - Indicate whether the field has been touched or not (when using external state management).
 * @param uppercaseOnly - If true, lowercase characters are automatically converted to uppercase.
 * @param className - The optional className object allows you to override the default styling.
 * @returns Alphanumeric pin field component with Formik state management.
 */
export declare function FormikAlphaNumericPinField({ id, data, name, length, label, labelType, tooltip, required, hideError, uppercaseOnly, className, ...props }: FormikAlphaNumericPinFieldProps): JSX.Element;

declare interface FormikAlphaNumericPinFieldProps {
    id?: string;
    name: string;
    data?: {
        cy?: string;
        test?: string;
    };
    length: number;
    label?: string;
    labelType?: 'small' | 'large';
    tooltip?: string | default_2.ReactNode;
    required?: boolean;
    hideError?: boolean;
    uppercaseOnly?: boolean;
    className?: AlphaNumericPinFieldClassName & {
        root?: string;
    };
    [key: string]: unknown;
}

/**
 * FormikColorPicker is a wrapper around the ColorPicker component that integrates with Formik for form handling.
 *
 * @param name - The name of the field (used for Formik).
 * @param label - The label for the color picker.
 * @param labelType - The type of label, can be 'small' or 'large'.
 * @param validateForm - A function to validate the form when the color is changed.
 * @param tooltip - Optional tooltip text or component to display additional information.
 * @param required - Indicates whether the field is required.
 * @param disabled - Indicates whether the color picker is disabled.
 * @param triggerIcon - An optional icon to display as a trigger for the color picker.
 * @param presetColors - An array of preset colors to display in the color picker.
 * @param position - The position of the color picker relative to the trigger icon.
 * @param submitText - The text to display on the submit button of the color picker.
 * @param colorLabel - The label for the color input field.
 * @param colorTooltip - Optional tooltip for the color input field.
 * @param dataTrigger - Optional data attributes for the trigger icon (for testing purposes).
 * @param dataHexInput - Optional data attributes for the hex input field (for testing purposes).
 * @returns A ColorPicker component that integrates with Formik for form handling.
 */
export declare function FormikColorPicker({ name, label, labelType, validateForm, tooltip, required, disabled, triggerIcon, presetColors, position, submitText, colorLabel, colorTooltip, dataTrigger, dataHexInput, dataSubmit, className, }: FormikColorPickerProps): JSX.Element;

export declare interface FormikColorPickerProps {
    name: string;
    label?: string;
    labelType?: 'small' | 'large';
    validateForm?: () => void;
    tooltip?: string | default_2.ReactNode;
    required?: boolean;
    disabled?: boolean;
    triggerIcon?: IconDefinition;
    presetColors?: string[];
    position?: 'bottom' | 'top' | 'bottom-left' | 'top-left';
    submitText: string;
    colorLabel: string;
    colorTooltip?: string;
    dataTrigger?: {
        cy?: string;
        test?: string;
    };
    dataHexInput?: {
        cy?: string;
        test?: string;
    };
    dataSubmit?: {
        cy?: string;
        test?: string;
    };
    className?: ColorPickerClassName;
}

/**
 * This component provides a simple date changer with a label and a button to edit the date (not coupled to a formik context).
 *
 * @param id - The id of the date changer
 * @param name - The name of the field as used to keep track of the state in Formik.
 * @param label - The label of the date changer
 * @param labelType - The type of the label (small or large)
 * @param placeholder - The placeholder of the date changer (is only shown if no date is selected)
 * @param tooltip - The tooltip of the date changer (is only shown if a label is given)
 * @param required - Whether the date label should contain a required symbol
 * @param disabled - Whether the date changer is disabled or not
 * @param hideError - Whether the error message should be hidden
 * @param format - The format of the date when the edit mode is not active (then the display is up to the browser implementation)
 * @param className - The optional className object allows you to override the default styling.
 * @param onDateChange - The function to be called when the date is changed (state management)
 * @param dataTrigger - The object of data attributes that can be used for testing (e.g. data-test or data-cy) for the popover trigger
 * @param dataCalendar - The object of data attributes that can be used for testing (e.g. data-test or data-cy) for the calendar
 * @param dataNextMonth - The object of data attributes that can be used for testing (e.g. data-test or data-cy) for the next month button
 * @param dataPreviousMonth - The object of data attributes that can be used for testing (e.g. data-test or data-cy) for the previous month button
 * @returns Date changer component with optional label, edit button and save button.
 */
export declare function FormikDatePicker({ id, name, label, labelType, placeholder, tooltip, required, disabled, hideError, className, dataTrigger, dataCalendar, dataNextMonth, dataPreviousMonth, ...props }: FormikDatePickerProps): JSX.Element;

export declare interface FormikDatePickerProps extends Omit<DatePickerProps, 'date' | 'onDateChange' | 'error' | 'isTouched'> {
    name: string;
}

/**
 * This component provides a simple datetime picker with a label and a button to edit the date (not coupled to a formik context).
 *
 * @param name - The name of the field as used to keep track of the state in Formik.
 * @param label - The label of the datetime picker.
 * @param labelType - The type of the label (small or large).
 * @param placeholder - The placeholder of the datetime picker (is only shown if no date is selected).
 * @param tooltip - The tooltip of the datetime picker (is only shown if a label is given).
 * @param required - Whether the datetime label should contain a required symbol.
 * @param disabled - Whether the datetime picker is disabled or not.
 * @param hideError - Whether the error message should be hidden.
 * @param className - The optional className object allows you to override the default styling.
 * @param dataTrigger - The object of data attributes that can be used for testing (e.g. data-test or data-cy) for the popover trigger.
 * @param dataCalendar - The object of data attributes that can be used for testing (e.g. data-test or data-cy) for the calendar icon.
 * @param dataHours - The object of data attributes that can be used for testing (e.g. data-test or data-cy) for the hours input.
 * @param dataMinutes - The object of data attributes that can be used for testing (e.g. data-test or data-cy) for the minutes input.
 * @param dataSeconds - The object of data attributes that can be used for testing (e.g. data-test or data-cy) for the seconds input.
 * @param dataPreviousMonth - The object of data attributes that can be used for testing (e.g. data-test or data-cy) for the previous month button.
 * @param dataNextMonth - The object of data attributes that can be used for testing (e.g. data-test or data-cy) for the next month button.
 * @returns Datetime picker component with optional label, edit button and save button.
 */
export declare function FormikDatetimePicker({ name, label, labelType, placeholder, tooltip, required, disabled, hideError, className, dataTrigger, dataCalendar, dataHours, dataMinutes, dataSeconds, dataPreviousMonth, dataNextMonth, ...props }: FormikDatetimePickerProps): JSX.Element;

export declare interface FormikDatetimePickerProps extends Omit<DateTimePickerProps, 'date' | 'onDateChange' | 'error' | 'isTouched'> {
    name: string;
}

/**
 * This function returns a text field component for use without formik
 *
 * @param id - The id of the input field.
 * @param value - The value of the input field (external state management).
 * @param onChange - The onChange function of the input field (external state management).
 * @param label - The text displayed as label.
 * @param labelType - The optional labelType can be used to change the size and position of the label according to pre-defined standards.
 * @param placeholder - The placeholder text for the input field.
 * @param precision - The optional precision defines the number of decimal places that are allowed.
 * @param min - The optional min defines the minimum value that is allowed.
 * @param max - The optional max defines the maximum value that is allowed.
 * @param unit - The optional unit is shown next to the input field.
 * @param tooltip - The optional tooltip is shown on hover over the tooltip next to the label.
 * @param required - Indicate whether the field is required or not.
 * @param hideError - Indicate whether the error message should be hidden or not.
 * @param error - The error message that is displayed below the input field.
 * @param isTouched - Indicate whether the field has been touched or not (validation is not handled by this component).
 * @param disabled - Indicate whether the field is disabled or not.
 * @param onBlur - The onBlur function of the input field.
 * @param data - The object of data attributes that can be used for testing (e.g. data-test or data-cy)
 * @param className - The optional className object allows you to override the default styling.
 */
export declare function FormikNumberField({ id, name, value, onChange, label, labelType, placeholder, precision, min, max, unit, tooltip, required, hideError, error, isTouched, disabled, onBlur, data, className, ...props }: FormikNumberFieldNameProps | FormikNumberFieldOnChangeProps): JSX.Element;

export declare interface FormikNumberFieldNameProps extends FormikNumberFieldProps {
    name: string;
    value?: never;
    onChange?: never;
    isTouched?: never;
}

export declare interface FormikNumberFieldOnChangeProps extends FormikNumberFieldProps {
    name?: never;
    value: string;
    onChange: (newValue: string) => void;
    isTouched?: boolean;
}

declare interface FormikNumberFieldProps {
    id?: string;
    label?: string;
    labelType?: 'small' | 'large';
    placeholder?: string;
    precision?: number;
    min?: number;
    max?: number;
    unit?: string;
    tooltip?: string | default_2.ReactNode;
    required?: boolean;
    hideError?: boolean;
    error?: string;
    disabled?: boolean;
    onBlur?: () => void;
    data?: {
        cy?: string;
        test?: string;
    };
    className?: NumberFieldClassName & {
        root?: string;
    };
    [key: string]: unknown;
}

/**
 * This function returns a pin field component for use with Formik.
 *
 * @param id - The id of the input field.
 * @param name - The name of the input field (used for Formik).
 * @param length - The length of the pin (number of digits).
 * @param required - Indicate whether the field is required or not.
 * @param label - The text displayed as label.
 * @param labelType - The optional labelType can be used to change the size and position of the label according to pre-defined standards.
 * @param tooltip - The optional tooltip is shown on hover over the tooltip next to the label.
 * @param hideError - Indicate whether the error message should be hidden or not.
 * @param className - The class names for the different parts of the component.
 * @param data - Optional data attributes for testing purposes.
 * @returns A pin field component that integrates with Formik for form handling.
 */
export declare function FormikPinField({ id, name, length, required, label, labelType, tooltip, hideError, className, data, }: FormikPinFieldProps): JSX.Element;

export declare interface FormikPinFieldProps {
    id?: string;
    name: string;
    length: number;
    required?: boolean;
    label?: string;
    labelType?: 'small' | 'large';
    tooltip?: string | default_2.ReactNode;
    hideError?: boolean;
    className?: {
        field?: string;
        label?: string;
        tooltip?: string;
        input?: string;
        inputItem?: string;
    };
    data?: {
        cy?: string;
        test?: string;
    };
}

/**
 * This component returns a select field that works as to be expected in a Formik environment.
 * State is managed by Formik through the name attribute.
 *
 * @param id - The id of the field.
 * @param data - The object of data attributes that can be used for testing (e.g. data-test or data-cy)
 * @param name - The name of the field.
 * @param items - The array of items that should be available on the select component.
 * @param groups - The optional groups array can be used to group items in the select component.
 * @param label - The optional label is shown next to the field in the form.
 * @param labelType - The optional labelType can be used to change the size and position of the label according to pre-defined standards.
 * @param placeholder - The optional placeholder is shown when no value is selected / initialization with 'undefined' is chosen.
 * @param disabled - The optional disabled prop disables the select component.
 * @param error - The optional error message is shown next to the component.
 * @param hideError - Hide the error message below this component as is might be more appropriate to show it somewhere else.
 * @param contentPosition - The position of the content of the select component. Currently only 'item-aligned' and 'popper' are supported.
 * @param tooltip - The optional tooltip is shown on hover next to the label.
 * @param required - Indicate whether the field is required or not.
 * @param className - The optional className object allows you to override the default styling.
 * @returns Select component with formik state management.
 */
export declare function FormikSelectField({ id, data, name, items, groups, label, labelType, placeholder, tooltip, required, disabled, error, hideError, contentPosition, className, ...props }: FormikSelectFieldItemsProps | FormikSelectFieldGroupsProps): JSX.Element;

export declare interface FormikSelectFieldGroupsProps extends FormikSelectFieldProps {
    groups: SelectGroup[];
    items?: never;
}

export declare interface FormikSelectFieldItemsProps extends FormikSelectFieldProps {
    items: SelectItem[];
    groups?: never;
}

declare interface FormikSelectFieldProps {
    id?: string;
    data?: {
        cy?: string;
        test?: string;
    };
    name: string;
    label?: string;
    labelType?: 'small' | 'large';
    placeholder?: string;
    tooltip?: string | default_2.ReactNode;
    required?: boolean;
    disabled?: boolean;
    error?: string;
    hideError?: boolean;
    contentPosition?: 'item-aligned' | 'popper';
    className?: {
        root?: string;
        label?: string;
        error?: string;
        tooltip?: string;
        select?: SelectClassName;
    };
}

/**
 * This function extends the pre-styled Switch component so that it works as to be expected in a Formik environment.
 * State, in this case, is managed by Formik through the name attribute.
 *
 * @param id - The id of the switch.
 * @param name - The name of the field. This is used to identify the field in Formik.
 * @param data - The object of data attributes that can be used for testing (e.g. data-test or data-cy)
 * @param label - The label that is displayed next to the switch.
 * @param labelLeft - Indicator whether the label should be displayed on the left or right side of the switch.
 * @param disabled - Indicator whether the switch is disabled or not.
 * @param error - The error message that is shown below the switch.
 * @param hideError - Indicator whether the error message is displayed or not.
 * @param size - The size of the switch. The size can be small, medium or large.
 * @param tooltip - The tooltip that is displayed when hovering over the label. Tooltips are only available with the standardLabel setting.
 * @param required - Indicator whether the field is required or not. This is only available with the standardLabel setting.
 * @param className - The optional className object allows you to override the default styling.
 * @returns Switch component with formik state management
 */
export declare function FormikSwitchField({ id, name, data, disabled, error, hideError, label, labelLeft, size, required, tooltip, className, }: FormikSwitchFieldProps): JSX.Element;

export declare interface FormikSwitchFieldProps {
    id?: string;
    name: string;
    data?: {
        cy?: string;
        test?: string;
    };
    disabled?: boolean;
    error?: string;
    hideError?: boolean;
    label?: string;
    labelLeft?: boolean;
    size?: 'sm' | 'md' | 'lg';
    tooltip?: string | default_2.ReactNode;
    required?: boolean;
    className?: SwitchClassName;
}

/**
 * This function returns a text field that works as to be expected in a Formik environment.
 * State can be managed either through Formik or internally by passing a value and onChange function.
 *
 * @param id - The id of the field.
 * @param data - The object of data attributes that can be used for testing (e.g. data-test or data-cy)
 * @param name - The name of the field as used to keep track of the state in Formik. If no value and onChange function are provided, this field is required.
 * @param value - The value of the field. This is used to manage the state internally. If no name is provided, this field is required.
 * @param onChange - The onChange function is called when the value of the field changes. This is used to manage the state internally. If no name is provided, this field is required.
 * @param error - The error message that is shown below the field. If a name is provided, this prop will not be used.
 * @param label - The optional label is shown next to the field in the form.
 * @param labelType - The optional labelType can be used to change the size and position of the label according to pre-defined standards.
 * @param placeholder - The optional placeholder is shown when the field is empty.
 * @param tooltip - The optional tooltip is shown on hover next to the label.
 * @param maxLength - The optional maxLength is shown below the field to indicate the maximum number of characters allowed.
 * @param maxLengthUnit - The optional maxLengthUnit is shown next to the maxLength to indicate the unit of the maximum number of characters allowed.
 * @param hideMaxLength - Indicate whether the maxLength should be hidden or not.
 * @param required - Indicate whether the field is required or not.
 * @param hideError - Hide the error message below this component as is might be more appropriate to show it somewhere else.
 * @param disabled - Disable the field.
 * @param className - The optional className object allows you to override the default styling.
 * @returns Text field component with Formik state management.
 */
export declare function FormikTextareaField({ id, data, name, value, onChange, error, label, labelType, icon, placeholder, tooltip, required, hideError, disabled, className, ...props }: FormikTextareaFieldWithNameProps | FormikTextareaFieldWithOnChangeProps): JSX.Element;

declare interface FormikTextareaFieldProps {
    id?: string;
    data?: {
        cy?: string;
        test?: string;
    };
    label?: string;
    labelType?: 'small' | 'large';
    placeholder?: string;
    tooltip?: string | default_2.ReactNode;
    maxLength?: number;
    maxLengthUnit?: string;
    hideMaxLength?: boolean;
    required?: boolean;
    hideError?: boolean;
    disabled?: boolean;
    className?: {
        root?: string;
        field?: string;
        icon?: string;
        label?: string;
        input?: string;
        error?: string;
        tooltip?: string;
    };
}

export declare interface FormikTextareaFieldWithNameProps extends FormikTextareaFieldProps {
    name: string;
    value?: never;
    onChange?: never;
    error?: never;
    [key: string]: unknown;
}

export declare interface FormikTextareaFieldWithOnChangeProps extends FormikTextareaFieldProps {
    name?: never;
    value: string;
    onChange: (newValue: string) => void;
    error?: string;
    [key: string]: unknown;
}

/**
 * This function returns a text field that works as to be expected in a Formik environment.
 * State can be managed either through Formik or internally by passing a value and onChange function.
 *
 * @param id - The id of the field.
 * @param data - The object of data attributes that can be used for testing (e.g. data-test or data-cy)
 * @param name - The name of the field as used to keep track of the state in Formik. If no value and onChange function are provided, this field is required.
 * @param value - The value of the field. This is used to manage the state internally. If no name is provided, this field is required.
 * @param onChange - The onChange function is called when the value of the field changes. This is used to manage the state internally. If no name is provided, this field is required.
 * @param error - The error message that is shown below the field. If a name is provided, this prop will not be used.
 * @param label - The optional label is shown next to the field in the form.
 * @param labelType - The optional labelType can be used to change the size and position of the label according to pre-defined standards.
 * @param icon - An optional icon (FontAwesomeIcon IconDefinition) that is shown on the right side of the text input component
 * @param iconPosition - The optional iconPosition can be used to change the position of the icon according to pre-defined standards.
 * @param onIconClick - An optional function that is called when the icon (previous prop) is clicked
 * @param onEnter - An optional function that is called when the user presses the Enter key in the input field.
 * @param onReset - The optional onReset function adds a cancellation icon to the text field (right side; replacing icons positioned there)
 * @param placeholder - The optional placeholder is shown when the field is empty.
 * @param tooltip - The optional tooltip is shown on hover next to the label.
 * @param required - Indicate whether the field is required or not.
 * @param hideError - Hide the error message below this component as is might be more appropriate to show it somewhere else.
 * @param disabled - Disable the field.
 * @param onPaste - An optional function that is called when the user pastes text into the field.
 * @param className - The optional className object allows you to override the default styling.
 * @returns Text field component with Formik state management.
 */
export declare function FormikTextField({ id, data, name, value, onChange, onEnter, onReset, error, label, labelType, icon, iconPosition, onIconClick, placeholder, tooltip, required, hideError, isTouched, disabled, onPaste, className, ...props }: FormikTextFieldWithNameProps | FormikTextFieldWithOnChangeProps): JSX.Element;

declare interface FormikTextFieldProps {
    id?: string;
    data?: {
        cy?: string;
        test?: string;
    };
    label?: string;
    labelType?: 'small' | 'large';
    icon?: IconDefinition_2;
    iconPosition?: 'left' | 'right';
    onIconClick?: () => void;
    onEnter?: (event: default_2.KeyboardEvent<HTMLInputElement>) => void;
    onReset?: () => void;
    placeholder?: string;
    tooltip?: string | default_2.ReactNode;
    required?: boolean;
    hideError?: boolean;
    disabled?: boolean;
    onPaste?: default_2.ClipboardEventHandler<HTMLInputElement>;
    className?: TextFieldClassName & {
        root?: string;
    };
}

export declare interface FormikTextFieldWithNameProps extends FormikTextFieldProps {
    name: string;
    value?: never;
    onChange?: never;
    error?: never;
    isTouched?: never;
    [key: string]: unknown;
}

export declare interface FormikTextFieldWithOnChangeProps extends FormikTextFieldProps {
    name?: never;
    value: string;
    onChange: (newValue: string) => void;
    error?: string;
    isTouched?: boolean;
    [key: string]: unknown;
}

declare type Granularity = 'day' | 'hour' | 'minute' | 'second';

/**
 * This function returns a label component based on the RadixUI label.
 *
 * @param id - The id of the label.
 * @param data - The object of data attributes that can be used for testing (e.g. data-test or data-cy)
 * @param forId - The id of the element that the label is for.
 * @param label - The text displayed as label.
 * @param required - Indicate whether the field is required or not.
 * @param tooltip - The optional tooltip is shown on hover over the label.
 * @param showTooltipSymbol - Indicate whether the tooltip symbol should be shown or not.
 * @param tooltipSymbolSize - The size of the tooltip symbol.
 * @param className - The optional className object allows you to override the default styling.
 * @returns Label component with optional tooltip and required symbol.
 */
export declare function Label({ id, data, forId, label, required, tooltip, showTooltipSymbol, tooltipSymbolSize, className, }: LabelProps): default_2.ReactElement;

export declare interface LabelProps {
    id?: string;
    data?: {
        cy?: string;
        test?: string;
    };
    forId?: string;
    label: string;
    required?: boolean;
    tooltip?: string | default_2.ReactNode;
    showTooltipSymbol?: boolean;
    tooltipSymbolSize?: 'sm' | 'md' | 'lg' | 'xl';
    className?: {
        root?: string;
        tooltip?: string;
        tooltipSymbol?: string;
        arrow?: string;
    };
}

/**
 * This function returns a text field component for use without formik
 *
 * @param id - The id of the input field.
 * @param value - The value of the input field (external state management).
 * @param onChange - The onChange function of the input field (external state management).
 * @param label - The text displayed as label.
 * @param labelType - The optional labelType can be used to change the size and position of the label according to pre-defined standards.
 * @param placeholder - The placeholder text for the input field.
 * @param precision - The optional precision defines the number of decimal places that are allowed.
 * @param min - The optional min defines the minimum value that is allowed.
 * @param max - The optional max defines the maximum value that is allowed.
 * @param unit - The optional unit is shown next to the input field.
 * @param tooltip - The optional tooltip is shown on hover over the tooltip next to the label.
 * @param required - Indicate whether the field is required or not.
 * @param hideError - Indicate whether the error message should be hidden or not.
 * @param error - The error message that is displayed below the input field.
 * @param isTouched - Indicate whether the field has been touched or not (validation is not handled by this component).
 * @param disabled - Indicate whether the field is disabled or not.
 * @param onBlur - The onBlur function of the input field.
 * @param data - The object of data attributes that can be used for testing (e.g. data-test or data-cy)
 * @param className - The optional className object allows you to override the default styling.
 */
export declare function NumberField({ id, value, onChange, label, labelType, placeholder, precision, min, max, unit, tooltip, required, hideError, error, isTouched, disabled, onBlur, data, className, ...props }: NumberFieldProps): default_2.ReactElement;

export declare interface NumberFieldClassName {
    field?: string;
    label?: string;
    input?: string;
    unit?: string;
    error?: string;
    tooltip?: string;
}

export declare interface NumberFieldProps {
    id?: string;
    value: string | number;
    onChange: (newValue: string) => void;
    label?: string;
    labelType?: 'small' | 'large';
    placeholder?: string;
    precision?: number;
    min?: number;
    max?: number;
    unit?: string;
    tooltip?: string | default_2.ReactNode;
    required?: boolean;
    hideError?: boolean;
    error?: string;
    isTouched?: boolean;
    disabled?: boolean;
    onBlur?: () => void;
    data?: {
        cy?: string;
        test?: string;
    };
    className?: NumberFieldClassName;
    [key: string]: unknown;
}

declare interface SelectClassName {
    root?: string;
    trigger?: string;
    content?: string;
    item?: string;
    groupLabel?: string;
    separator?: string;
}

/**
 * This component returns a select field that works as to be expected in a Formik environment.
 * State is managed by Formik through the name attribute.
 *
 * @param id - The id of the field.
 * @param data - The object of data attributes that can be used for testing (e.g. data-test or data-cy)
 * @param name - The name of the field.
 * @param items - The array of items that should be available on the select component.
 * @param groups - The optional groups array can be used to group items in the select component.
 * @param value - The value of the field (external state management).
 * @param onChange - The onChange function of the field (external state management).
 * @param onBlur - The onBlur function of the field (external state management).
 * @param label - The optional label is shown next to the field in the form.
 * @param labelType - The optional labelType can be used to change the size and position of the label according to pre-defined standards.
 * @param placeholder - The optional placeholder is shown when no value is selected / initialization with 'undefined' is chosen.
 * @param disabled - The optional disabled prop disables the select component.
 * @param error - The optional error message is shown next to the component.
 * @param hideError - Hide the error message below this component as is might be more appropriate to show it somewhere else.
 * @param contentPosition - The position of the content of the select component. Currently only 'item-aligned' and 'popper' are supported.
 * @param tooltip - The optional tooltip is shown on hover next to the label.
 * @param required - Indicate whether the field is required or not.
 * @param className - The optional className object allows you to override the default styling.
 * @returns Select component with formik state management.
 */
export declare function SelectField({ id, data, name, items, groups, value, onChange, onBlur, label, labelType, placeholder, tooltip, required, disabled, error, hideError, contentPosition, className, ...props }: SelectFieldItemsProps | SelectFieldGroupsProps): JSX.Element;

export declare interface SelectFieldGroupsProps extends SelectFieldProps {
    groups: SelectGroup[];
    items?: never;
}

export declare interface SelectFieldItemsProps extends SelectFieldProps {
    items: SelectItem[];
    groups?: never;
}

declare interface SelectFieldProps {
    id?: string;
    data?: {
        cy?: string;
        test?: string;
    };
    name?: string;
    value?: string;
    onChange: (newValue: string) => void;
    onBlur?: () => void;
    label?: string;
    labelType?: 'small' | 'large';
    placeholder?: string;
    tooltip?: string | default_2.ReactNode;
    required?: boolean;
    disabled?: boolean;
    error?: string;
    hideError?: boolean;
    contentPosition?: 'item-aligned' | 'popper';
    className?: {
        root?: string;
        label?: string;
        error?: string;
        tooltip?: string;
        select?: SelectClassName;
    };
}

declare interface SelectGroup {
    label?: string | React.ReactNode;
    hideSeparator?: boolean;
    items: SelectItem[];
}

declare interface SelectItem {
    id?: string;
    data?: {
        cy?: string;
        test?: string;
    };
    value: string;
    disabled?: boolean;
    label: string | React.ReactNode;
    shortLabel?: string;
    icon?: React.ReactNode;
    className?: {
        item?: string;
        tooltip?: string;
        label?: string;
        icon?: string;
    };
    tooltip?: string;
}

declare interface SwitchClassName {
    root?: string;
    element?: string;
    thumb?: string;
    label?: string;
    tooltip?: string;
}

/**
 * This function returns a text field component for use without formik
 *
 * @param id - The id of the input field.
 * @param data - The object of data attributes that can be used for testing (e.g. data-test or data-cy)
 * @param name - The name of the input field.
 * @param field - The field object from formik.
 * @param value - The value of the input field (external state management).
 * @param onChange - The onChange function of the input field (external state management).
 * @param label - The text displayed as label.
 * @param labelType - The optional labelType can be used to change the size and position of the label according to pre-defined standards.
 * @param placeholder - The placeholder text for the input field.
 * @param tooltip - The optional tooltip is shown on hover over the tooltip next to the label.
 * @param maxLength - The optional maxLength is used to limit the number of characters that can be entered in the field.
 * @param maxLengthUnit - This optional label allows to specify a custom label for the maxLength indicator (e.g. "characters left" supporting internationalization).
 * @param hideMaxLength - Indicate whether the maxLength indicator should be hidden or not.
 * @param required - Indicate whether the field is required or not.
 * @param isTouched - Indicate whether the field has been touched or not (validation is not handled by this component).
 * @param hideError - Indicate whether the error message should be hidden or not.
 * @param error - The error message that is shown below the field.
 * @param disabled - Indicate whether the field is disabled or not.
 * @param className - The optional className object allows you to override the default styling.
 * @returns Text field component with optional label, tooltip, error message and icon.
 */
export declare function TextareaField({ id, data, name, field, value, onChange, label, labelType, placeholder, tooltip, maxLength, maxLengthUnit, hideMaxLength, required, isTouched, hideError, error, disabled, className, ...props }: TextareaFieldNameProps | TextareaFieldOnChangeProps): JSX.Element;

export declare interface TextareaFieldNameProps extends TextareaFieldProps {
    name: string;
    field: FieldInputProps<string>;
    value?: never;
    onChange?: never;
    [key: string]: unknown;
}

export declare interface TextareaFieldOnChangeProps extends TextareaFieldProps {
    name?: never;
    field?: never;
    value: string;
    onChange: (newValue: string) => void;
    [key: string]: unknown;
}

declare interface TextareaFieldProps {
    id?: string;
    data?: {
        cy?: string;
        test?: string;
    };
    label?: string;
    labelType?: 'small' | 'large';
    placeholder?: string;
    tooltip?: string | default_2.ReactNode;
    maxLength?: number;
    maxLengthUnit?: string;
    hideMaxLength?: boolean;
    required?: boolean;
    hideError?: boolean;
    error?: string;
    isTouched?: boolean;
    disabled?: boolean;
    className?: {
        root?: string;
        field?: string;
        label?: string;
        input?: string;
        error?: string;
        tooltip?: string;
    };
}

/**
 * This function returns a text field component for use without formik
 *
 * @param id - The id of the input field.
 * @param data - The object of data attributes that can be used for testing (e.g. data-test or data-cy)
 * @param name - The name of the input field.
 * @param field - The field object from formik.
 * @param value - The value of the input field (external state management).
 * @param onChange - The onChange function of the input field (external state management).
 * @param label - The text displayed as label.
 * @param labelType - The optional labelType can be used to change the size and position of the label according to pre-defined standards.
 * @param placeholder - The placeholder text for the input field.
 * @param tooltip - The optional tooltip is shown on hover over the tooltip next to the label.
 * @param required - Indicate whether the field is required or not.
 * @param isTouched - Indicate whether the field has been touched or not (validation is not handled by this component).
 * @param hideError - Indicate whether the error message should be hidden or not.
 * @param error - The error message that is shown below the field.
 * @param disabled - Indicate whether the field is disabled or not.
 * @param onPaste - The optional onPaste function is called when the user pastes text into the input field.
 * @param className - The optional className object allows you to override the default styling.
 * @param icon - The optional icon is shown on the right side of the input field.
 * @param iconPosition - The optional iconPosition can be used to change the position of the icon to the left side of the input field.
 * @param onIconClick - The optional onIconClick function is called when the icon is clicked.
 * @param onEnter - The optional onEnter function is called when the user presses the Enter key in the input field.
 * @param onReset - The optional onReset function adds a cancellation icon to the text field (right side; replacing icons positioned there)
 * @returns Text field component with optional label, tooltip, error message and icon.
 */
export declare function TextField({ id, data, name, field, value, onChange, label, labelType, placeholder, tooltip, required, isTouched, hideError, error, disabled, onPaste, className, icon, iconPosition, onIconClick, onEnter, onReset, ...props }: TextFieldNameProps | TextFieldOnChangeProps): JSX.Element;

export declare interface TextFieldClassName {
    field?: string;
    label?: string;
    input?: string;
    error?: string;
    tooltip?: string;
    icon?: string;
}

export declare interface TextFieldNameProps extends TextFieldProps {
    name: string;
    field: FieldInputProps<string>;
    value?: never;
    onChange?: never;
    [key: string]: unknown;
}

export declare interface TextFieldOnChangeProps extends TextFieldProps {
    name?: never;
    field?: never;
    value: string;
    onChange: (newValue: string) => void;
    [key: string]: unknown;
}

declare interface TextFieldProps {
    id?: string;
    data?: {
        cy?: string;
        test?: string;
    };
    label?: string;
    labelType?: 'small' | 'large';
    placeholder?: string;
    tooltip?: string | default_2.ReactNode;
    required?: boolean;
    hideError?: boolean;
    error?: string;
    isTouched?: boolean;
    disabled?: boolean;
    onPaste?: default_2.ClipboardEventHandler<HTMLInputElement>;
    className?: TextFieldClassName;
    icon?: IconProp;
    iconPosition?: 'left' | 'right';
    onIconClick?: () => void;
    onEnter?: (event: default_2.KeyboardEvent<HTMLInputElement>) => void;
    onReset?: () => void;
}

export { }
